version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/ubuntu/jenkins-data/workspace/moca/nginx:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - gateway
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "while ! nc -z zookeeper 2181; do
        echo 'Waiting for ZooKeeper...';
        sleep 1;
      done;
      /etc/confluent/docker/run"
    networks:
      - backend

  db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRE_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRE_PASSWORD}
      POSTGRES_DB: ${POSTGRE_DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6380:6380"
    volumes:
      - redis-data:/data
    networks:
      - backend

  gateway:
    build:
      context: ./remote/gateway/gateway 
    container_name: gateway
    ports:
      - "8090:8090"
    networks:
      - backend
    depends_on:
      - db
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=local

  auth:
    build:
      context: ./remote/auth/auth
    container_name: auth
    ports:
      - "8091:8091"
    networks:
      - backend
    depends_on:
      - db
      - redis
      - gateway
    environment:
      - SPRING_PROFILES_ACTIVE=local
  
  llm:
    build:
      context: ./remote/llm/llm
    container_name: llm
    ports:
      - "8092:8092"
    networks:
      - backend
    depends_on:
      - gateway
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STREAM_BUFFER_SIZE=${STREAM_BUFFER_SIZE}

volumes:
  postgres-data:
  redis-data:

networks:
  backend:
    driver: bridge
