pipeline {
    agent any
    
    environment {
        // 이미지 이름 설정
        MCP_API_IMAGE = "mcp-api:latest"
        WEB_SEARCH_IMAGE = "web-search:latest"
        
        // 컨테이너 이름 설정
        MCP_API_CONTAINER = "mcp-api"
        WEB_SEARCH_CONTAINER = "web-search"
        
        // 네트워크 이름 설정
        NETWORK_NAME = "mcp-network"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Create Network') {
            steps {
                sh '''
                # 기존 네트워크 확인 및 없으면 생성
                if ! docker network inspect ${NETWORK_NAME} &>/dev/null; then
                    docker network create ${NETWORK_NAME}
                    echo "Created network: ${NETWORK_NAME}"
                else
                    echo "Network ${NETWORK_NAME} already exists"
                fi
                '''
            }
        }
        
        stage('Build Images') {
            parallel {
                stage('Build MCP API') {
                    steps {
                        dir('back/mcp-api') {
                            sh 'docker build -t ${MCP_API_IMAGE} .'
                        }
                    }
                }
                
                stage('Build Web Search') {
                    steps {
                        dir('back/web-search') {
                            sh 'docker build -t ${WEB_SEARCH_IMAGE} .'
                        }
                    }
                }
            }
        }
        
        stage('Deploy Services') {
            steps {
                sh '''
                # 기존 컨테이너 중지 및 제거
                echo "Stopping and removing existing containers..."
                docker stop ${MCP_API_CONTAINER} || true
                docker rm ${MCP_API_CONTAINER} || true
                docker stop ${WEB_SEARCH_CONTAINER} || true
                docker rm ${WEB_SEARCH_CONTAINER} || true
                
                # Web Search 서비스 시작
                echo "Starting Web Search service..."
                docker run -d \\
                    --name ${WEB_SEARCH_CONTAINER} \\
                    --network ${NETWORK_NAME} \\
                    --restart unless-stopped \\
                    -p 8100:8100 \\
                    ${WEB_SEARCH_IMAGE}
                
                # MCP API 서비스 시작
                echo "Starting MCP API service..."
                docker run -d \\
                    --name ${MCP_API_CONTAINER} \\
                    --network ${NETWORK_NAME} \\
                    --restart unless-stopped \\
                    -e "WEB_SEARCH_URL=http://${WEB_SEARCH_CONTAINER}:8100" \\
                    -p 8050:8050 \\
                    ${MCP_API_IMAGE}
                '''
            }
        }
        
        stage('Check Services') {
            steps {
                sh '''
                echo "Checking service status..."
                sleep 10
                
                # 서비스 실행 상태 확인
                echo "Web Search service:"
                docker ps --filter "name=${WEB_SEARCH_CONTAINER}"
                
                echo "MCP API service:"
                docker ps --filter "name=${MCP_API_CONTAINER}"
                
                # 로그 확인
                echo "Web Search logs:"
                docker logs ${WEB_SEARCH_CONTAINER} --tail 20
                
                echo "MCP API logs:"
                docker logs ${MCP_API_CONTAINER} --tail 20
                '''
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
            sh '''
            # 오류 시 컨테이너 로그 수집
            docker logs ${WEB_SEARCH_CONTAINER} --tail 50 > web_search_error.log || true
            docker logs ${MCP_API_CONTAINER} --tail 50 > mcp_api_error.log || true
            '''
        }
    }
}