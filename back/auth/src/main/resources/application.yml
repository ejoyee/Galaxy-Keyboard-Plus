server:
  port: 8082
  servlet:
    session:
      cookie:
        same-site: Lax   # 기본(Lax) 권장. 필요 시 None + https

spring:
  main:
    web-application-type: servlet          # ⟳ 추가
    config:
      import: optional:dotenv:.env           # ➕ 추가
  application:
    name: auth
  datasource:
    url: jdbc:postgresql://3.38.95.110:5432/${POSTGRES_AUTH_DB_NAME}
    username: ${POSTGRES_AUTH_USER}
    password: ${POSTGRES_AUTH_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none   # 생산 단계는 validate, 개발 초기엔 create
    properties:
      hibernate:
        format_sql: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            #            client-secret: ${KAKAO_CLIENT_SECRET}       # “보안 강화형” 앱만 필요
            redirect-uri: "${baseUrl}/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            #            client-authentication-method: POST
            scope: profile_nickname, account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
jwt:
  secret: ${JWT_SECRET_KEY}
  access-token-validity: ${JWT_AT_VALIDITY:900000}
  refresh-token-validity: ${JWT_RT_VALIDITY:604800000}

logging:
  level:
    org.springframework.security.oauth2.client.endpoint: DEBUG
    org.springframework.web.client.RestTemplate: DEBUG
management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
