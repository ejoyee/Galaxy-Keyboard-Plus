version: "3.8"

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/ubuntu/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - gateway
      - frontend
      - mcp
    restart: always
    networks:
      - web

  frontend:
    container_name: frontend-service
    build: ./front
    env_file: .env.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${FRONTEND_API_URL}
    ports:
      - "0.0.0.0:3000:3000"
    restart: always
    networks:
      - web

  gateway:
    container_name: gateway-service
    build: ./back/gateway
    command:
      - "java"
      - "-jar"
      - "/app/app.jar"
      - "--spring.profiles.active=prod"
    env_file: .env.prod
    ports:
      - "0.0.0.0:8000:8000"
    depends_on:
      - redis-ratelimiter
    restart: always
    networks:
      - web
      - internal

  auth:
    container_name: auth-service
    build: ./back/auth
    command:
      - "java"
      - "-jar"
      - "/app/app.jar"
      - "--spring.profiles.active=prod"
    env_file: .env.prod
    depends_on:
      - postgres_auth
    ports:
      - "0.0.0.0:8082:8082"
    restart: always
    networks:
      - internal

  backend:
    container_name: backend-service
    build: ./back/backend
    command:
      - "java"
      - "-jar"
      - "/app/app.jar"
      - "--spring.profiles.active=prod"
    env_file: .env.prod
    depends_on:
      - postgres_sched
    ports:
      - "0.0.0.0:8083:8083"
    restart: always
    networks:
      - internal

  rag:
    container_name: rag-service
    build: ./back/rag
    command:
      - "uvicorn"
      - "app.main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8090"
    env_file: .env.prod
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - PINECONE_API_KEY=${PINECONE_API_KEY}
    ports:
      - "0.0.0.0:8090:8090"
    restart: always
    networks:
      - internal

  search-service:
    container_name: search-service
    build: ./back/search
    command:
      - "uvicorn"
      - "app.main:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8091"
    ports:
      - "0.0.0.0:8091:8091"
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json
      - PINECONE_API_KEY=${PINECONE_API_KEY}
    env_file: .env.prod
    restart: always
    networks:
      - internal

  # MCP 웹 검색 서비스 추가
  mcp:
    container_name: mcp-api
    build: ./back/mcp
    ports:
      - "0.0.0.0:8050:8050"
    environment:
      - WEB_SEARCH_URL=http://web-search:8100
      - GOOGLE_WEB_SEARCH_URL=http://google-web-search:8150
    env_file: .env.prod
    depends_on:
      - web-search
    restart: always
    networks:
      - web
      - internal

  # 웹 검색 서비스 추가
  web-search:
    container_name: web-search
    build: ./back/brave-search
    ports:
      - "0.0.0.0:8100:8100"
    environment:
      - BRAVE_API_KEY=${BRAVE_API_KEY}
    restart: always
    networks:
      - internal


  google-web-search:
    container_name: google-web-search
    build: ./back/google-web-search
    ports:
      - "0.0.0.0:8150:8150"
    environment:
      - GOOGLE_SEARCH_API_KEY=${GOOGLE_SEARCH_API_KEY}
      - GOOGLE_SEARCH_ENGINE_ID=${GOOGLE_SEARCH_ENGINE_ID}
    restart: always
    networks:
      - internal

  airbnb-mcp:
    container_name: airbnb-mcp
    build: ./back/airbnb-mcp
    ports:
      - "0.0.0.0:8180:8180"
    restart: always
    networks:
      - internal


  # Redis 서비스 (Rate Limiter 전용)
  redis-ratelimiter:
    container_name: moca-redis-ratelimiter
    image: redis:7-alpine
    ports:
      - "0.0.0.0:6380:6380"
    restart: always
    command: redis-server --port 6380 --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_ratelimiter_data:/data
    networks:
      - internal

  postgres_auth:
    container_name: postgres-auth
    image: postgres:15
    env_file: .env.prod
    environment:
      POSTGRES_USER:     ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_AUTH_DB_NAME}
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - pg_auth:/var/lib/postgresql/data
    networks:
      - internal

  postgres_sched:
    container_name: postgres-sched
    image: postgres:15
    env_file: .env.prod
    environment:
      POSTGRES_USER:     ${POSTGRES_SCHED_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SCHED_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_SCHED_DB_NAME}
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - pg_sched:/var/lib/postgresql/data
    networks:
      - internal

  postgres_rag:
    container_name: postgres-rag
    image: postgres:15
    env_file: .env.prod
    environment:
      POSTGRES_USER:     ${POSTGRES_RAG_USER}
      POSTGRES_PASSWORD: ${POSTGRES_RAG_PASSWORD}
      POSTGRES_DB:       ${POSTGRES_RAG_DB_NAME}
    ports:
      - "5434:5432"
    restart: always
    volumes:
      - pg_rag:/var/lib/postgresql/data
    networks:
      - internal

volumes:
  pg_auth:
  pg_sched:
  pg_rag:
  redis_ratelimiter_data:

networks:
  web:
    driver: bridge
  internal:
    driver: bridge