"use client";

import { ChevronLeft, ChevronRight, X } from "lucide-react";
import { useEffect, useRef, useState } from "react";

import Image from "next/image";
import axiosInstance from "@/lib/axiosInstance";

// Ï†ÑÏ≤¥ ÌîÑÎ°¨ÌîÑÌä∏ Î¶¨Ïä§Ìä∏
const ALL_PROMPTS = [
  "Î≥Ñ Í∑∏Î†§ÏßÑ Ïó∞ÎëêÏÉâ ÎÑ§ÏùºÏïÑÌä∏ ÏÇ¨ÏßÑ Ï∞æÏïÑÏ§ò",
  "ÌïòÌíàÌïòÎäî Í≥†ÏñëÏù¥ ÏÇ¨ÏßÑ Ï¢Ä",
  "Ïù¥ÎîîÏïº ÏôÄÏù¥ÌååÏù¥ ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïåÏïÑ?",
  "Î¥ÑÎ¥Ñ ÏôÄÏù¥ÌååÏù¥ ÎπÑÎ∞ÄÎ≤àÌò∏ ÏïåÎ†§Ï§ò",
  "Ïò§ÎØÄÎùºÏù¥Ïä§ ÎÑ§ÏùºÏïÑÌä∏ ÏÇ¨ÏßÑ",
  "Ìó¨Î°úÌÇ§Ìã∞ Í≥ºÏûê ÏÇ¨ÏßÑ Î≥¥ÎÇ¥Ï§ò",
  "ÍπÄÌï¥Îí∑Í≥†Í∏∞ Î®πÏúºÎü¨ Ïñ∏Ï†ú Í∞îÏóàÏßÄ?",
  "ANTZ ÏôÄÏù¥ÌååÏù¥ ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Î≠êÏïº?",
  "ÏÇºÍ≤πÏÇ¥ Î®πÏùÄ Í≥≥Ïù¥ Ïñ¥ÎîîÏßÄ?",
  "Î©∏ÎßùÏù∏Í∞Ä Î©∏Ï¢ÖÏù∏Í∞Ä ÌïòÎäî ÏãúÏßë Ï†úÎ™©Ïù¥ Î≠êÎçîÎùº?",
  "Î¨∏ÏÉÅÌõàÏù¥ Ï∂îÏ≤úÌïú ÏãúÏßë Ï†úÎ™©",
  "Ìé∏ÏùòÏ†ê Í∏∞ÌîÑÌã∞ÏΩò",
  "ÌôçÍ∏∏Îèô Ïî® Î≤àÌò∏ Ï¢Ä ÏïåÎ†§Ï§ò",
  "Í≤ÄÏùÄ ÏàòÎÖÄÎì§ Ï¢åÏÑù Ïñ¥ÎîîÏïº",
  "ÌååÎ¨ò Ïñ¥ÎîîÏÑú Î¥§ÏóàÏßÄ?",
  "Í∏∞ÏÉùÏ∂© Î©∞Ïπ†Ïóê Î¥§ÏóàÏñ¥?",
  "Î∞±ÎëêÏÇ∞ Î™á Î™ÖÏù¥ÏÑú Î¥§ÏßÄ?",
  "ÌîºÌîºÌã∞ ÎßåÎì§ Îïå Ï∞∏Í≥†Ìï†ÎßåÌïú Îç∞Í∞Ä Ïñ¥ÎîîÏòÄÏñ¥",
  "Ìï¥Ïª§ÌÜ§ ÏòÅÎÇ® Î≥∏ÏÑ† Ïñ¥ÎîîÏÑú Ìï¥?",
  "ÏïÑÏù¥ÎîîÏñ¥ Í≤ΩÏßÑÎåÄÌöå Ï†úÏ∂ú ÎßàÍ∞êÏùºÏù¥ Ïñ∏Ï†úÏòÄÏßÄ?",
  "ÌîÑÎü∞Ìã∞Ïñ¥ ÌïÑÏàòÎ°ú Ìï¥Ïïº ÌïòÎäî Í≤å Î≠êÏòÄÏßÄ?",
  "Ï∂îÏ≤ú Í≥†ÏñëÏù¥ ÏÇ¨Î£å",
  "Ïò§ÎìúÏïÑÏù¥ Í≥†ÏñëÏù¥ ÏÇ¨ÏßÑ",
  "ÎåÄÍµ¨ Í∞Ñ ÎÇ†Ïù¥ Ïñ∏Ï†úÏïº?",
];

export default function ChatBox() {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([]);
  const [availablePrompts, setAvailablePrompts] = useState(ALL_PROMPTS);
  const [visiblePrompts, setVisiblePrompts] = useState([]);
  const chatEndRef = useRef(null);
  const [isTyping, setIsTyping] = useState(false);

  // Î™®Îã¨ Í¥ÄÎ†®
  const [modalOpen, setModalOpen] = useState(false);
  const [modalImages, setModalImages] = useState([]);
  const [modalIndex, setModalIndex] = useState(0);

  // 2Í∞úÎßå ÎûúÎç§ÏúºÎ°ú ÌëúÏãú
  useEffect(() => {
    setVisiblePrompts(availablePrompts.slice(0, 2));
  }, [availablePrompts]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  useEffect(() => {
    function getRandomItems(arr, n) {
      const shuffled = [...arr].sort(() => 0.5 - Math.random());
      return shuffled.slice(0, n);
    }

    setVisiblePrompts(getRandomItems(availablePrompts, 2));
  }, [availablePrompts]);

  const sendMessage = async (text) => {
    const userMessage = { role: "user", text };
    setMessages((prev) => [...prev, userMessage]);
    setIsTyping(true);

    try {
      const params = new URLSearchParams();
      params.append("user_id", "adminadmin"); // ÌÖåÏä§Ìä∏Ïö© ÏïÑÏù¥Îîî
      params.append("query", text);

      console.log("üì§ ÏöîÏ≤≠ Î≥¥ÎÉÑ:", Object.fromEntries(params.entries()));

      // ÏùºÎ∂ÄÎü¨ 2Ï¥à ÏßÄÏó∞ (Î°úÎî© Ïä§ÌîºÎÑàÏö©)
      // await new Promise((res) => setTimeout(res, 2000));

      const res = await axiosInstance.post("/search/image/", params);
      const data = res.data;

      let botText = "";
      let imageIds = [];

      if (data.type === "info_search") {
        botText = data.answer || "Í¥ÄÎ†® Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.";
        // photo_ids ÏûàÏùÑ Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄÎèÑ Ï∂îÍ∞Ä
        if (Array.isArray(data.photo_ids) && data.photo_ids.length > 0) {
          imageIds = data.photo_ids.map((id) => `/images/${id}.jpg`);
        }
      } else if (data.type === "photo_search") {
        // photo_idsÍ∞Ä ÏóÜÍ±∞ÎÇò ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÏïàÎÇ¥ Î©îÏãúÏßÄ
        if (!Array.isArray(data.photo_ids) || data.photo_ids.length === 0) {
          botText = "Ï∞æÏúºÏãúÎäî ÏÇ¨ÏßÑÏù¥ ÏóÜÏäµÎãàÎã§. Îã§Î•∏ ÎÇ¥Ïö©ÏúºÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏãúÍ≤†Ïñ¥Ïöî?";
        } else {
          botText = data.answer || "";
          imageIds = data.photo_ids.map((id) => `/images/grid-images/${id}.jpg`);
        }
      } else if (data.type === "conversation") {
        botText = data.answer || "Í¥ÄÎ†® Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.";
        // photo_ids ÏûàÏùÑ Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄÎèÑ Ï∂îÍ∞Ä
        if (Array.isArray(data.photo_ids) && data.photo_ids.length > 0) {
          imageIds = data.photo_ids.map((id) => `/images/${id}.jpg`);
        }
      } else {
        botText = "Ïïå Ïàò ÏóÜÎäî ÏùëÎãµ ÌòïÏãùÏûÖÎãàÎã§.";
      }

      const botMessage = {
        role: "bot",
        text: botText,
        images: imageIds,
      };

      setMessages((prev) => [...prev, botMessage]);
    } catch (e) {
      const botMessage = {
        role: "bot",
        text: "ÏùëÎãµÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.",
        images: [],
      };
      setMessages((prev) => [...prev, botMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleSend = () => {
    if (!input.trim()) return;
    sendMessage(input);
    setInput("");
  };

  const handlePromptClick = (prompt) => {
    setInput(""); // reset input
    sendMessage(prompt);

    // ÏÇ¨Ïö©Ìïú ÌîÑÎ°¨ÌîÑÌä∏ Ï†úÍ±∞
    setAvailablePrompts((prev) => prev.filter((p) => p !== prompt));
  };

  const openImageModal = (images, index) => {
    setModalImages(images);
    setModalIndex(index);
    setModalOpen(true);
  };

  const closeImageModal = () => {
    setModalOpen(false);
    setModalImages([]);
    setModalIndex(0);
  };

  return (
    <>
      <div className="chat w-[448px] h-[448px] flex flex-col justify-between p-4 bg-white rounded-xl">
        {/* Î©îÏãúÏßÄ Ï∂úÎ†• */}
        <div className="flex flex-col gap-3 mb-2 overflow-y-auto">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`max-w-[80%] w-fit text-sm px-4 py-2 rounded-xl ${
                msg.role === "user"
                  ? "self-end bg-black text-white rounded-tr-none mr-1"
                  : "self-start bg-white text-gray-800 border border-gray-200 rounded-tl-none shadow-sm"
              }`}
            >
              <p className="mb-1">{msg.text}</p>
              {msg.images && msg.images.length > 0 && (
                <div className="inline-flex flex-wrap gap-2 mt-2">
                  {msg.images.map((src, i) => (
                    <div
                      key={i}
                      className="overflow-hidden border rounded-lg aspect-square w-[88px] h-[88px]"
                      onClick={() => openImageModal(msg.images, i)}
                    >
                      <Image
                        src={src}
                        alt={`response image ${i + 1}`}
                        width={112}
                        height={112}
                        className="object-cover w-full h-full"
                      />
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
          {isTyping && (
            <div className="self-start bg-white border border-gray-200 text-gray-400 rounded-xl px-4 py-2 text-sm w-fit max-w-[80%] shadow-sm rounded-tl-none">
              Ìè¨ÌÇ§Í∞Ä Ï∞æÏïÑÎ≥¥Îäî Ï§ë<span className="typing" />
            </div>
          )}
          <div ref={chatEndRef} />
        </div>

        <div>
          {/* ÌîÑÎ°¨ÌîÑÌä∏ ÏòàÏãú */}
          <div className="flex flex-col gap-1 mb-2">
            {visiblePrompts.map((text, idx) => (
              <button
                key={idx}
                onClick={() => handlePromptClick(text)}
                className="w-full px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200"
              >
                {text}
              </button>
            ))}
          </div>

          {/* ÏûÖÎ†• ÏòÅÏó≠ */}
          <div className="flex items-center h-12 gap-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter") handleSend();
              }}
              placeholder="Ï∞æÍ≥† Ïã∂ÏùÄ ÏÇ¨ÏßÑ ÎòêÎäî Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              className="flex-1 h-full px-4 py-3 text-sm border rounded-lg"
            />
            <button
              onClick={handleSend}
              className="flex items-center justify-center w-12 h-full text-white rounded-lg group bg-cyan-400 hover:bg-[#86efac]"
            >
              <div className="w-3 h-3 bg-white rounded-full group-hover:hidden" />
              <span className="hidden text-sm font-semibold group-hover:inline">Ï†ÑÏÜ°</span>
            </button>
          </div>
        </div>
      </div>
      {modalOpen && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
          onClick={closeImageModal} // Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
        >
          <div
            className="relative bg-white rounded-xl p-4 shadow-xl max-w-[90%] max-h-[90%] flex flex-col items-center z-40"
            onClick={(e) => e.stopPropagation()} // Î™®Îã¨ ÎÇ¥Ïö© ÌÅ¥Î¶≠ Ïãú Îã´ÌûàÏßÄ ÏïäÎèÑÎ°ù
          >
            <button
              onClick={closeImageModal}
              className="absolute z-50 text-2xl font-bold text-gray-500 top-2 right-2 hover:text-black"
              aria-label="Close"
            >
              <X strokeWidth={0.8} />
            </button>
            <div className="relative flex items-center justify-center">
              {modalIndex > 0 && (
                <button
                  onClick={() => setModalIndex(modalIndex - 1)}
                  className="absolute left-[-80px] top-1/2 -translate-y-1/2 p-2 rounded-full bg-white shadow hover:bg-gray-100"
                  aria-label="Previous Image"
                >
                  <ChevronLeft
                    size={32}
                    strokeWidth={0.5}
                  />
                </button>
              )}
              <Image
                src={modalImages[modalIndex]}
                alt={`Selected ${modalIndex + 1}`}
                width={600}
                height={600}
                className="object-contain mt-6 max-w-full max-h-[80vh] rounded-md"
                priority
              />
              {modalIndex < modalImages.length - 1 && (
                <button
                  onClick={() => setModalIndex(modalIndex + 1)}
                  className="absolute right-[-80px] top-1/2 -translate-y-1/2 p-2 rounded-full bg-white shadow hover:bg-gray-100"
                  aria-label="Next Image"
                >
                  <ChevronRight
                    size={32}
                    strokeWidth={0.5}
                  />
                </button>
              )}
            </div>
            <div className="px-4 py-1 mt-4 text-sm text-gray-700 bg-gray-300 font-base rounded-3xl">
              {modalIndex + 1} / {modalImages.length}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
