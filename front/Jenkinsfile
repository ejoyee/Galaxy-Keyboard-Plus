pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    // Firebase 앱 ID
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    // 빌드 강제 실행 여부
    FORCE_BUILD      = 'true'
    // Docker 이미지 설정
    DOCKER_IMAGE     = 'reactnativecommunity/react-native-android:latest'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // 빌드 시작 로그
        sh '''
          echo "===================================================="
          echo "🚀 빌드 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 빌드 ID: ${BUILD_ID}"
          echo "🔍 Git 커밋: ${GIT_COMMIT}"
          echo "🔍 브랜치: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          
          // 변경 파일 목록 출력
          echo "==== 변경된 파일 목록 ===="
          echo "${diff}"
          echo "=========================="
          
          // "front/" 하위 파일 변경이 있으면 빌드
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/') } ? 'true' : 'false'
          
          // 강제 빌드 옵션이 true이면 무조건 빌드
          if (env.FORCE_BUILD == 'true') {
            env.BUILD_FRONTEND = 'true'
            echo "🔧 강제 빌드 옵션이 활성화되어 있습니다."
          }
          
          echo env.BUILD_FRONTEND=='true'
               ? "▶ Frontend 변경 감지: 빌드합니다"
               : "▶ Frontend 변경 없음: 스킵합니다"
        }
      }
    }

    stage('Check Project Structure') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "🔍 프로젝트 구조 확인"
          echo "===================================================="
          
          # 디렉토리 구조 확인
          echo "📂 작업 디렉토리: $(pwd)"
          
          echo "📂 front/frontend 디렉토리 확인:"
          ls -la front/frontend || { echo "❌ front/frontend 디렉토리가 없습니다"; exit 1; }
          
          # package.json 확인
          if [ -f "front/frontend/package.json" ]; then
            echo "✅ package.json 파일 존재"
            cat front/frontend/package.json | grep "name\\|version"
          else
            echo "❌ package.json 파일이 없습니다. React Native 프로젝트가 아닐 수 있습니다."
            exit 1
          fi
          
          echo "📂 front/frontend/android 디렉토리 확인:"
          ls -la front/frontend/android || { echo "❌ front/frontend/android 디렉토리가 없습니다"; exit 1; }
          
          echo "📂 gradlew 파일 확인:"
          if [ -f "front/frontend/android/gradlew" ]; then
            echo "✅ gradlew 파일 존재"
            chmod +x front/frontend/android/gradlew
          else
            echo "❌ gradlew 파일이 없습니다."
            exit 1
          fi
          
          echo "===================================================="
        '''
      }
    }

    stage('Prepare Files') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 시크릿 파일 준비
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔐 시크릿 파일 준비"
            echo "===================================================="
            
            # Keystore 디렉토리 생성
            mkdir -p front/frontend/android/app/keystore
            
            # 시크릿 파일 복사
            cp "$KEYSTORE_FILE" front/frontend/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" front/frontend/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
            
            echo "✅ 시크릿 파일 복사 완료"
            echo "===================================================="
          '''
        }
      }
    }

    stage('Build with Dockerfile') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "🐳 Dockerfile을 통한 Android 빌드"
          echo "===================================================="
          
          # 작업 디렉토리
          WORKSPACE_DIR="$(pwd)"
          
          # 임시 작업 디렉토리 생성
          BUILD_DIR="$WORKSPACE_DIR/android-build"
          mkdir -p "$BUILD_DIR"
          
          # 전체 React Native 프로젝트 복사 (중요 변경 부분) - node_modules 포함하여 복사
          echo "📂 프로젝트 파일 복사 중..."
          cp -r front/frontend/* "$BUILD_DIR/"
          
          # 현재 디렉토리에 Dockerfile 생성 (수정된 Dockerfile)
          cat > "$BUILD_DIR/Dockerfile" << 'EOF'
FROM reactnativecommunity/react-native-android:latest

WORKDIR /app

# 프로젝트 파일 복사
COPY . /app

# 환경 변수 설정
ENV ANDROID_SDK_ROOT=/opt/android-sdk
ENV ANDROID_HOME=/opt/android-sdk

# 필요한 node 모듈 설치 (추가된 부분)
RUN npm install

# Android 디렉토리로 이동 (수정된 부분)
WORKDIR /app/android

# 로컬 프로퍼티 파일 생성
RUN echo "sdk.dir=/opt/android-sdk" > local.properties

# gradlew 실행 권한 설정
RUN chmod +x ./gradlew

# APK 빌드
RUN ./gradlew assembleDebug --stacktrace
EOF
          
          # Dockerfile 기반으로 이미지 빌드
          echo "🏗️ Docker 이미지 빌드 중..."
          docker build -t android-build:${BUILD_ID} "$BUILD_DIR"
          
          # 빌드 결과물 복사 (경로 수정)
          echo "🔄 빌드 결과물 복사 중..."
          docker run --rm \
            -v "$WORKSPACE_DIR/apk:/output" \
            android-build:${BUILD_ID} \
            bash -c "mkdir -p /output && find /app/android -name '*.apk' -exec cp {} /output/ \\;"
          
          # 이미지 삭제
          docker rmi android-build:${BUILD_ID}
          
          # 빌드 결과 확인
          echo "📂 빌드 결과 확인:"
          find apk -name "*.apk" || echo "❌ APK 파일이 생성되지 않았습니다"
          
          echo "===================================================="
        '''
      }
    }

    stage('Deploy to Firebase') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // Firebase 배포
        withCredentials([
          string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔥 Firebase 배포"
            echo "===================================================="
            
            # APK 파일 찾기
            APK_FILE=$(find "$(pwd)/apk" -name "*.apk" | head -1)
            
            if [ -z "$APK_FILE" ]; then
              echo "❌ APK 파일을 찾을 수 없어 Firebase 배포를 건너뜁니다"
              exit 0
            fi
            
            echo "✅ 업로드할 APK 파일: $APK_FILE"
            
            # Docker에서 Firebase 배포 실행
            docker run --rm \
              -v "$(pwd):/workspace" \
              -w /workspace \
              -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
              -e FIREBASE_APP_ID="$FIREBASE_APP_ID" \
              node:14 \
              bash -c '
                set -x
                
                echo "==== Node.js 버전 확인 ===="
                node -v
                npm -v
                
                echo "==== Firebase CLI 설치 ===="
                npm install -g firebase-tools
                
                echo "==== APK 파일 확인 ===="
                APK_FILE=$(find /workspace/apk -name "*.apk" | head -1)
                
                if [ -z "$APK_FILE" ]; then
                  echo "❌ APK 파일을 찾을 수 없습니다."
                  exit 0
                fi
                
                echo "✅ APK 파일: $APK_FILE"
                
                echo "==== Firebase 배포 ===="
                firebase appdistribution:distribute "$APK_FILE" \
                  --app "$FIREBASE_APP_ID" \
                  --token "$FIREBASE_TOKEN" \
                  --groups "testers" \
                  --release-notes "Jenkins CI 자동 배포 빌드" || echo "⚠️ Firebase 배포 실패"
              '
            
            echo "===================================================="
          '''
        }
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "📦 APK 아카이브"
          echo "===================================================="
          
          mkdir -p apk-archive
          
          # apk 디렉토리에서 APK 파일 찾기
          APK_COUNT=$(find "$(pwd)/apk" -name "*.apk" 2>/dev/null | wc -l || echo "0")
          
          if [ "$APK_COUNT" -gt 0 ]; then
            echo "✅ $APK_COUNT 개의 APK 파일 발견:"
            find "$(pwd)/apk" -name "*.apk" 2>/dev/null
            
            # 모든 APK 파일을 아카이브 디렉토리로 복사
            cp -r apk/*.apk apk-archive/ || true
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
            echo "No APK files found" > apk-archive/build-failed.txt
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      sh '''
        echo "===================================================="
        echo "✅ Frontend CI/CD 성공 🎉"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "❌ Frontend CI/CD 실패 ❗"
        echo "===================================================="
      '''
    }
    always {
      sh '''
        echo "===================================================="
        echo "🧹 작업 공간 정리"
        echo "===================================================="
        
        # 임시 디렉토리 정리
        rm -rf android-build apk || true
      '''
      cleanWs()
    }
  }
}