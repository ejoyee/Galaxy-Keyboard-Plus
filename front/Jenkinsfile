pipeline {
  // 1) 전체 에이전트를 any로 지정
  agent any

  environment {
    // Android SDK 환경 변수 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
  }

  parameters {
    string(
      name: 'FORCE_SERVICES',
      defaultValue: '',
      description: '콤마로 지정 시 해당 서비스만 빌드·배포 (예: frontend)'
    )
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('변경된 프론트엔드 감지') {
      steps {
        script {
          // 이전 커밋 대비 변경된 파일 중 front/frontend/ 경로만 추출
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          def changed = diff.split('\n')
                            .findAll{ it.startsWith('front/frontend/') }
                            .collect{ 'frontend' }
                            .unique()
          def forced = params.FORCE_SERVICES ? params.FORCE_SERVICES.split(',').collect{ it.trim() } : []
          env.CHANGED_SERVICES = (forced ?: changed).join(',')
          if (!env.CHANGED_SERVICES) {
            echo "프론트엔드 변경 없음, 빌드 스킵"
            currentBuild.result = 'SUCCESS'
          } else {
            echo "빌드 대상: ${env.CHANGED_SERVICES}"
          }
        }
      }
    }

    stage('Docker 컨테이너 안에서 준비 & 빌드') {
      // frontend 변경이 있을 때만 실행
      when { expression { env.CHANGED_SERVICES.contains('frontend') } }
      steps {
        script {
          // 2) my-android-ci:latest 이미지 내부에서 모든 작업 실행
          docker.image('my-android-ci:latest').inside('--user root:root') {

            // ── 2-1) 비밀키 등 복사
            withCredentials([
              file(  credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
              string(credentialsId: 'KEYSTORE_PASSWORD',       variable: 'KEYSTORE_PASSWORD'),
              string(credentialsId: 'KEY_ALIAS',               variable: 'KEY_ALIAS'),
              string(credentialsId: 'KEY_PASSWORD',            variable: 'KEY_PASSWORD'),
              file(  credentialsId: 'google-services-json',    variable: 'GOOGLE_SERVICES_JSON'),
              file(  credentialsId: 'firebase-service-account',variable: 'FIREBASE_SERVICE_ACCOUNT')
            ]) {
              sh '''
                mkdir -p frontend/android/app/keystore
                cp "$KEYSTORE_FILE"            frontend/android/app/keystore/release.keystore
                cp "$GOOGLE_SERVICES_JSON"     frontend/android/app/google-services.json
                cp "$FIREBASE_SERVICE_ACCOUNT" frontend/android/firebase_service_account.json

                mkdir -p ~/.gradle
                cat > ~/.gradle/gradle.properties <<EOF
KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}
KEY_ALIAS=${KEY_ALIAS}
KEY_PASSWORD=${KEY_PASSWORD}
EOF
              '''
            }

            // ── 2-2) 의존성 설치
            dir('frontend/android') {
              sh 'yarn install'
              sh 'bundle install --path vendor/bundle'
              sh 'bundle exec fastlane install_plugins'
            }

            // ── 2-3) 빌드 및 Firebase App Distribution 업로드
            dir('frontend/android') {
              sh """
                export FASTLANE_FIREBASE_CLI_TOKEN=${FIREBASE_TOKEN}
                bundle exec fastlane release groups:'testers' notes:'CI 자동 배포 빌드'
              """
            }

          } // docker.image(...).inside 끝
        }
      }
    }

    stage('APK 아카이브') {
      when { expression { env.CHANGED_SERVICES.contains('frontend') } }
      steps {
        archiveArtifacts artifacts: 'frontend/android/app/build/outputs/**/*.apk', fingerprint: true
      }
    }
  }

  post {
    always { cleanWs() }
    success { echo '✅ Frontend CI/CD 성공' }
    failure { echo '❌ Frontend CI/CD 실패' }
  }
}
