pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    // Firebase 앱 ID
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // 빌드 시작 로그
        sh '''
          echo "===================================================="
          echo "🚀 빌드 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 빌드 ID: ${BUILD_ID}"
          echo "🔍 Git 커밋: ${GIT_COMMIT}"
          echo "🔍 브랜치: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          
          // 변경 파일 목록 출력
          echo "==== 변경된 파일 목록 ===="
          echo "${diff}"
          echo "=========================="
          
          // front/frontend/ 하위 파일 변경이 있으면 빌드
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/frontend/') } ? 'true' : 'false'
          echo env.BUILD_FRONTEND=='true'
               ? "▶ Frontend 변경 감지: 빌드합니다"
               : "▶ Frontend 변경 없음: 스킵합니다"
        }
      }
    }

    stage('Build & Distribute Frontend') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 직접 수동으로 빌드 준비
        sh '''
          echo "===================================================="
          echo "🔨 Android 빌드 준비"
          echo "===================================================="
          
          # 작업 디렉토리 설정
          WORK_DIR="$(pwd)/android_build"
          mkdir -p "$WORK_DIR"
          
          # Android 프로젝트 파일 복사
          cp -r front/frontend/android/* "$WORK_DIR/"
          
          # 필요한 디렉토리 생성
          mkdir -p "$WORK_DIR/app/keystore"
          
          echo "📂 작업 디렉토리 확인:"
          ls -la "$WORK_DIR"
          
          echo "===================================================="
        '''
        
        // 시크릿 파일 준비
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔐 시크릿 파일 준비"
            echo "===================================================="
            
            # 시크릿 파일 복사
            cp "$KEYSTORE_FILE" android_build/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" android_build/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" android_build/firebase_service_account.json
            
            echo "✅ 시크릿 파일 복사 완료"
            echo "===================================================="
          '''
        }
        
        // Gemfile 및 Fastlane 파일 생성
        sh '''
          echo "===================================================="
          echo "📄 Gemfile 및 Fastlane 파일 생성"
          echo "===================================================="
          
          # Gemfile 생성
          cat > android_build/Gemfile << 'EOL'
source "https://rubygems.org"

gem "fastlane"
gem "fastlane-plugin-firebase_app_distribution"
EOL
          
          # Fastlane 디렉토리 생성
          mkdir -p android_build/fastlane
          
          # Fastfile 생성
          cat > android_build/fastlane/Fastfile << 'EOL'
default_platform(:android)

platform :android do
  desc "Deploy a new version to Firebase App Distribution"
  lane :release do |options|
    gradle(
      task: "clean assembleRelease"
    )
    
    begin
      firebase_app_distribution(
        app: ENV["FIREBASE_APP_ID"],
        groups: options[:groups],
        release_notes: options[:notes],
        firebase_cli_token: ENV["FIREBASE_TOKEN"]
      )
    rescue => e
      puts "Firebase App Distribution 실패: #{e}"
      puts "APK 빌드는 완료되었으며 app/build/outputs/apk 디렉토리에서 확인 가능합니다."
    end
  end
end
EOL
          
          # Appfile 생성 (앱 패키지명은 보통 app/build.gradle 또는 AndroidManifest.xml에서 가져옵니다)
          cat > android_build/fastlane/Appfile << 'EOL'
json_key_file("firebase_service_account.json")
# 앱 패키지 이름은 app/build.gradle 파일에서 확인해야 합니다
# 아래는 예시이며, 실제 패키지명을 사용해야 합니다
package_name("com.ssafy.daero")
EOL
          
          echo "✅ Gemfile 및 Fastlane 파일 생성 완료"
          echo "===================================================="
        '''
        
        // Docker 실행
        sh '''
          echo "===================================================="
          echo "🐳 Docker 컨테이너에서 빌드 실행"
          echo "===================================================="
          
          # Docker 컨테이너 실행
          docker run --rm \
            -v "$(pwd)/android_build:/app" \
            -w /app \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
            -e KEYSTORE_PASSWORD="$KEYSTORE_PASSWORD" \
            -e KEY_ALIAS="$KEY_ALIAS" \
            -e KEY_PASSWORD="$KEY_PASSWORD" \
            -e FIREBASE_APP_ID="$FIREBASE_APP_ID" \
            my-android-ci:latest \
            bash -c '
              set -x
              
              # 작업 디렉토리 확인
              echo "==== 작업 디렉토리 내용 ===="
              pwd
              ls -la
              
              # Gemfile 확인
              echo "==== Gemfile 확인 ===="
              cat Gemfile
              
              # Fastlane 파일 확인
              echo "==== Fastlane 파일 확인 ===="
              ls -la fastlane
              
              # app/build.gradle 확인 (패키지명 확인을 위해)
              echo "==== app/build.gradle 확인 ===="
              cat app/build.gradle || echo "app/build.gradle 파일이 없습니다"
              
              # Bundler 설치
              echo "==== Bundler 설치 ===="
              gem install bundler -v 2.4.22 --no-document
              
              # Bundle 설치
              echo "==== Bundle 설치 ===="
              bundle config set --local path vendor/bundle
              bundle install
              
              # Fastlane 플러그인 설치
              echo "==== Fastlane 플러그인 설치 ===="
              bundle exec fastlane install_plugins
              
              # 앱 패키지 이름 추출 시도
              echo "==== 패키지 이름 확인 ===="
              if [ -f "app/build.gradle" ]; then
                APP_PACKAGE=$(grep "applicationId" app/build.gradle | sed -E "s/.*applicationId [\\\"](.*)[\\\"]/\\1/")
                echo "앱 패키지 이름: $APP_PACKAGE"
                
                # Appfile 수정
                if [ ! -z "$APP_PACKAGE" ]; then
                  sed -i "s/package_name(\\\".*\\\")/package_name(\\\"$APP_PACKAGE\\\")/g" fastlane/Appfile
                  echo "Appfile 수정 완료"
                fi
              fi
              
              # Gradlew 실행 권한 확인
              echo "==== Gradlew 실행 권한 확인 ===="
              chmod +x ./gradlew
              
              # SDK 라이센스 수락
              echo "==== SDK 라이센스 수락 ===="
              yes | sdkmanager --licenses || true
              
              # 빌드 실행
              echo "==== Gradle 빌드 실행 ===="
              ./gradlew clean assembleRelease || ./gradlew clean assembleDebug
              
              # 빌드 결과 확인
              echo "==== 빌드 결과 확인 ===="
              find . -name "*.apk"
              
              # Firebase 배포
              echo "==== Firebase 배포 시도 ===="
              bundle exec fastlane release groups:"testers" notes:"Jenkins CI 자동 배포 빌드" || echo "Firebase 배포 실패했지만 빌드는 완료됨"
            '
          
          BUILD_RESULT=$?
          
          # 빌드 결과 확인
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "❌ Android 빌드 실패 (종료 코드: $BUILD_RESULT)"
          else
            echo "✅ Android 빌드 성공"
            
            # 빌드 결과물 복사
            echo "🔄 빌드 결과물 복사 중..."
            mkdir -p front/frontend/android/app/build/outputs/apk
            cp -r android_build/app/build/outputs/apk/* front/frontend/android/app/build/outputs/apk/ || true
          fi
          
          echo "===================================================="
        '''
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "📦 APK 아카이브 시작"
          echo "===================================================="
          
          # APK 파일 존재 확인 (android_build 디렉토리도 확인)
          find android_build -name "*.apk" 2>/dev/null || echo "android_build에서 APK를 찾을 수 없습니다"
          find front/frontend/android -name "*.apk" 2>/dev/null || echo "front/frontend/android에서 APK를 찾을 수 없습니다"
          
          # 모든 APK 파일 출력
          echo "📱 모든 APK 파일 목록:"
          find . -name "*.apk" 2>/dev/null || echo "APK 파일을 찾을 수 없습니다"
          
          # APK 파일 수 계산
          APK_COUNT=$(find . -name "*.apk" 2>/dev/null | wc -l || echo 0)
          
          if [ "$APK_COUNT" -gt 0 ]; then
            echo "✅ $APK_COUNT 개의 APK 파일 발견"
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: '**/app/build/outputs/**/*.apk', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    always {
      sh '''
        echo "===================================================="
        echo "🧹 작업 공간 정리"
        echo "===================================================="
        rm -rf android_build || true
      '''
      cleanWs()
    }
    success {
      sh '''
        echo "===================================================="
        echo "✅ Frontend CI/CD 성공 🎉"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "❌ Frontend CI/CD 실패 ❗"
        echo "===================================================="
      '''
    }
  }
}