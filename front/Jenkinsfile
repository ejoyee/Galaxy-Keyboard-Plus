pipeline {
    agent any

    environment {
        // Android SDK 설정
        ANDROID_SDK_ROOT = '/opt/android-sdk'
        ANDROID_HOME     = '/opt/android-sdk'
        PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
        // Fastlane Firebase App Distribution 토큰
        FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    }

    parameters {
        string(
            name: 'FORCE_SERVICES',
            defaultValue: '',
            description: '콤마로 지정 시 해당 서비스만 강제 빌드·배포 (예: frontend)'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Detect Frontend Build') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'release' || params.FORCE_SERVICES.split(',').contains('frontend')) {
                        env.BUILD_FRONTEND = 'yes'
                        echo "▶ Release 브랜치 또는 FORCE_SERVICES=frontend: Frontend 빌드 실행"
                    } else {
                        def diff = sh(
                            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
                            returnStdout: true
                        ).trim()
                        def changed = diff.split('\n').findAll { it.startsWith('front/frontend/') }
                        env.BUILD_FRONTEND = changed ? 'yes' : 'no'
                        echo changed ? "▶ Frontend 변경 감지: 빌드 실행" : "▶ Frontend 변경 없음: 빌드 스킵"
                    }
                }
            }
        }

        stage('Docker Container Build') {
            when {
                expression { env.BUILD_FRONTEND == 'yes' }
            }
            steps {
                script {
                    docker.image('my-android-ci:latest').inside('--user root:root') {
                        // 1) 준비: 키스토어, 설정 복사
                        withCredentials([
                            file(  credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
                            string(credentialsId: 'KEYSTORE_PASSWORD',       variable: 'KEYSTORE_PASSWORD'),
                            string(credentialsId: 'KEY_ALIAS',               variable: 'KEY_ALIAS'),
                            string(credentialsId: 'KEY_PASSWORD',            variable: 'KEY_PASSWORD'),
                            file(  credentialsId: 'google-services-json',    variable: 'GOOGLE_SERVICES_JSON'),
                            file(  credentialsId: 'firebase-service-account',variable: 'FIREBASE_SERVICE_ACCOUNT')
                        ]) {
                            sh '''
                              mkdir -p front/frontend/android/app/keystore
                              cp "$KEYSTORE_FILE"            front/frontend/android/app/keystore/release.keystore
                              cp "$GOOGLE_SERVICES_JSON"     front/frontend/android/app/google-services.json
                              cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
                            '''
                        }

                        // 2) 의존성 설치
                        dir('front/frontend/android') {
                            sh 'yarn install'
                            sh 'bundle install --path vendor/bundle'
                            sh 'bundle exec fastlane install_plugins'
                        }

                        // 3) 빌드 & Firebase App Distribution 업로드
                        dir('front/frontend/android') {
                            sh "bundle exec fastlane release groups:'testers' notes:'CI 자동 배포 빌드'"
                        }
                    }
                }
            }
        }

        stage('Archive APK') {
            when {
                expression { env.BUILD_FRONTEND == 'yes' }
            }
            steps {
                archiveArtifacts artifacts: 'front/frontend/android/app/build/outputs/**/*.apk', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo '✅ Frontend CI/CD 성공적으로 완료'
        }
        failure {
            echo '❌ Frontend CI/CD 중 오류 발생'
        }
    }
}
