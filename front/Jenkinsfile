pipeline {
  agent any

  environment {
    // Android SDK ÏÑ§Ï†ï
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution ÌÜ†ÌÅ∞
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    // Firebase Ïï± ID
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    // ÎπåÎìú Í∞ïÏ†ú Ïã§Ìñâ Ïó¨Î∂Ä
    FORCE_BUILD      = 'true'
    // Docker Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
    DOCKER_IMAGE     = 'reactnativecommunity/react-native-android:latest' // React Native ÎπåÎìú ÌôòÍ≤ΩÏù¥ ÏÑ§ÏπòÎêú Docker Ïù¥ÎØ∏ÏßÄ
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // ÎπåÎìú ÏãúÏûë Î°úÍ∑∏
        sh '''
          echo "===================================================="
          echo "üöÄ ÎπåÎìú ÏãúÏûë: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "üîç ÎπåÎìú ID: ${BUILD_ID}"
          echo "üîç Git Ïª§Î∞ã: ${GIT_COMMIT}"
          echo "üîç Î∏åÎûúÏπò: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          
          // Î≥ÄÍ≤Ω ÌååÏùº Î™©Î°ù Ï∂úÎ†•
          echo "==== Î≥ÄÍ≤ΩÎêú ÌååÏùº Î™©Î°ù ===="
          echo "${diff}"
          echo "=========================="
          
          // "front/" ÌïòÏúÑ ÌååÏùº Î≥ÄÍ≤ΩÏù¥ ÏûàÏúºÎ©¥ ÎπåÎìú (Ï°∞Í±¥ ÏôÑÌôî)
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/') } ? 'true' : 'false'
          
          // Í∞ïÏ†ú ÎπåÎìú ÏòµÏÖòÏù¥ trueÏù¥Î©¥ Î¨¥Ï°∞Í±¥ ÎπåÎìú
          if (env.FORCE_BUILD == 'true') {
            env.BUILD_FRONTEND = 'true'
            echo "üîß Í∞ïÏ†ú ÎπåÎìú ÏòµÏÖòÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§."
          }
          
          echo env.BUILD_FRONTEND=='true'
               ? "‚ñ∂ Frontend Î≥ÄÍ≤Ω Í∞êÏßÄ: ÎπåÎìúÌï©ÎãàÎã§"
               : "‚ñ∂ Frontend Î≥ÄÍ≤Ω ÏóÜÏùå: Ïä§ÌÇµÌï©ÎãàÎã§"
        }
      }
    }

    stage('Prepare Files') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // ÏãúÌÅ¨Î¶ø ÌååÏùº Ï§ÄÎπÑ
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "üîê ÏãúÌÅ¨Î¶ø ÌååÏùº Ï§ÄÎπÑ"
            echo "===================================================="
            
            # Keystore ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
            mkdir -p front/frontend/android/app/keystore
            
            # ÏãúÌÅ¨Î¶ø ÌååÏùº Î≥µÏÇ¨
            cp "$KEYSTORE_FILE" front/frontend/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" front/frontend/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
            
            echo "‚úÖ ÏãúÌÅ¨Î¶ø ÌååÏùº Î≥µÏÇ¨ ÏôÑÎ£å"
            echo "===================================================="
          '''
        }
      }
    }

    stage('Build with Docker') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "üê≥ DockerÎ•º ÏÇ¨Ïö©Ìïú React Native ÎπåÎìú"
          echo "===================================================="
          
          # Docker Ïù¥ÎØ∏ÏßÄ ÌôïÏù∏
          echo "üîç Docker Ïù¥ÎØ∏ÏßÄ: ${DOCKER_IMAGE}"
          
          # Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ ÏúÑÏπò
          PROJECT_DIR="$(pwd)/front/frontend"
          
          # Docker Ïª®ÌÖåÏù¥ÎÑàÏóêÏÑú React Native ÎπåÎìú Ïã§Ìñâ
          docker run --rm \
            -v "$PROJECT_DIR:/app" \
            -w /app \
            -e KEYSTORE_PASSWORD="$KEYSTORE_PASSWORD" \
            -e KEY_ALIAS="$KEY_ALIAS" \
            -e KEY_PASSWORD="$KEY_PASSWORD" \
            ${DOCKER_IMAGE} \
            bash -c '
              set -e
              
              echo "==== React Native ÌôòÍ≤Ω ÌôïÏù∏ ===="
              node -v
              npm -v
              
              echo "==== ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ===="
              npm install
              
              echo "==== Android ÎπåÎìú Ïã§Ìñâ ===="
              cd android
              if [ -f "./gradlew" ]; then
                # gradlew Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
                chmod +x ./gradlew
                
                # ÎîîÎ≤ÑÍ∑∏ APK ÎπåÎìú
                ./gradlew assembleDebug --stacktrace
                
                # ÎπåÎìú Í≤∞Í≥º ÌôïÏù∏
                find . -name "*.apk"
              else
                echo "‚ùå gradlew ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§."
                exit 1
              fi
            '
          
          # ÎπåÎìú Í≤∞Í≥º ÏΩîÎìú Ï∫°Ï≤ò
          BUILD_RESULT=$?
          
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "‚ùå Docker ÎπåÎìú Ïã§Ìå® (Í≤∞Í≥º ÏΩîÎìú: $BUILD_RESULT)"
            exit $BUILD_RESULT
          fi
          
          echo "‚úÖ Docker ÎπåÎìú ÏôÑÎ£å"
          echo "===================================================="
        '''
      }
    }

    stage('Deploy to Firebase') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // Firebase Î∞∞Ìè¨
        withCredentials([
          string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN')
        ]) {
          sh '''
            echo "===================================================="
            echo "üî• Firebase Î∞∞Ìè¨"
            echo "===================================================="
            
            # APK ÌååÏùº Ï∞æÍ∏∞
            APK_FILE=$(find front/frontend -name "*.apk" | head -1)
            
            if [ -z "$APK_FILE" ]; then
              echo "‚ùå APK ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ Firebase Î∞∞Ìè¨Î•º Í±¥ÎÑàÎúÅÎãàÎã§"
              exit 1
            fi
            
            echo "‚úÖ ÏóÖÎ°úÎìúÌï† APK ÌååÏùº: $APK_FILE"
            
            # Î≥ÑÎèÑ Docker Ïª®ÌÖåÏù¥ÎÑàÏóêÏÑú Firebase CLI Ïã§Ìñâ
            docker run --rm \
              -v "$(pwd):/workspace" \
              -w /workspace \
              -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
              node:14 \
              bash -c '
                # Firebase CLI ÏÑ§Ïπò
                npm install -g firebase-tools
                
                # Firebase Î∞∞Ìè¨
                firebase appdistribution:distribute "$APK_FILE" \
                  --app "$FIREBASE_APP_ID" \
                  --token "$FIREBASE_TOKEN" \
                  --groups "testers" \
                  --release-notes "Jenkins CI ÏûêÎèô Î∞∞Ìè¨ ÎπåÎìú"
              '
            
            DEPLOY_RESULT=$?
            
            if [ $DEPLOY_RESULT -ne 0 ]; then
              echo "‚ùå Firebase Î∞∞Ìè¨ Ïã§Ìå® (Í≤∞Í≥º ÏΩîÎìú: $DEPLOY_RESULT)"
              exit $DEPLOY_RESULT
            fi
            
            echo "‚úÖ Firebase Î∞∞Ìè¨ ÏôÑÎ£å"
            echo "===================================================="
          '''
        }
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "üì¶ APK ÏïÑÏπ¥Ïù¥Î∏å"
          echo "===================================================="
          
          # APK ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
          APK_COUNT=$(find front/frontend -name "*.apk" 2>/dev/null | wc -l || echo "0")
          
          if [ "$APK_COUNT" -gt 0 ]; then
            echo "‚úÖ $APK_COUNT Í∞úÏùò APK ÌååÏùº Î∞úÍ≤¨:"
            find front/frontend -name "*.apk" 2>/dev/null
            
            # Î™®Îì† APK ÌååÏùºÏùÑ ÌïòÎÇòÏùò ÎîîÎ†âÌÜ†Î¶¨Î°ú Î≥µÏÇ¨
            mkdir -p apk-archive
            find front/frontend -name "*.apk" -exec cp {} apk-archive/ \\;
          else
            echo "‚ùå APK ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"
            mkdir -p apk-archive
            echo "No APK files found" > apk-archive/build-failed.txt
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      sh '''
        echo "===================================================="
        echo "‚úÖ Frontend CI/CD ÏÑ±Í≥µ üéâ"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "‚ùå Frontend CI/CD Ïã§Ìå® ‚ùó"
        echo "===================================================="
      '''
    }
    always {
      sh '''
        echo "===================================================="
        echo "üßπ ÏûëÏóÖ Í≥µÍ∞Ñ Ï†ïÎ¶¨"
        echo "===================================================="
      '''
      cleanWs()
    }
  }
}