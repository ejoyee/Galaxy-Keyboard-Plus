pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          // front/frontend/ 하위 파일 변경이 있으면 빌드
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/frontend/') } ? 'true' : 'false'
          echo env.BUILD_FRONTEND=='true'
               ? "▶ Frontend 변경 감지: 빌드합니다"
               : "▶ Frontend 변경 없음: 스킵합니다"
        }
      }
    }

    stage('Build & Distribute Frontend') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 디렉토리 구조 확인 및 디버깅
        sh '''
          # 시크릿 디렉토리 만들기
          mkdir -p front/frontend/android/app/keystore
          
          # 디렉토리 구조 자세히 확인
          echo "===== 작업 디렉토리 ====="
          pwd
          
          echo "===== 전체 디렉토리 구조 ====="
          ls -la
          
          echo "===== front 디렉토리 ====="
          ls -la front
          
          echo "===== front/frontend 디렉토리 ====="
          ls -la front/frontend || echo "front/frontend 디렉토리가 없습니다"
          
          # android 디렉토리가 없으면 생성
          if [ ! -d "front/frontend/android" ]; then
            echo "android 디렉토리가 없습니다. 생성합니다."
            mkdir -p front/frontend/android
          fi
          
          echo "===== front/frontend/android 디렉토리 ====="
          ls -la front/frontend/android || echo "front/frontend/android 디렉토리가 없습니다"
        '''
        
        // 시크릿 파일 준비
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            cp "$KEYSTORE_FILE" front/frontend/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" front/frontend/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
          '''
        }
        
        // Docker 명령 실행 - 절대 경로 사용 및 각 명령이 독립적으로 실행되도록 수정
        sh '''
          echo "===== Docker 컨테이너에서 명령 실행 ====="
          
          # 1) 의존성 설치
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            my-android-ci:latest \
            bash -c "ls -la /workspace/front/frontend && cd /workspace/front/frontend/android && yarn install"
            
          # 2) Bundle 설치
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            my-android-ci:latest \
            bash -c "cd /workspace/front/frontend/android && bundle install --path vendor/bundle"
            
          # 3) Fastlane 플러그인 설치
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            my-android-ci:latest \
            bash -c "cd /workspace/front/frontend/android && bundle exec fastlane install_plugins"
            
          # 4) 릴리스 빌드 및 배포
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
            -e KEYSTORE_PASSWORD="$KEYSTORE_PASSWORD" \
            -e KEY_ALIAS="$KEY_ALIAS" \
            -e KEY_PASSWORD="$KEY_PASSWORD" \
            my-android-ci:latest \
            bash -c "cd /workspace/front/frontend/android && bundle exec fastlane release groups:\\"testers\\" notes:\\"CI 자동 배포 빌드\\""
        '''
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        archiveArtifacts artifacts: 'front/frontend/android/app/build/outputs/**/*.apk', fingerprint: true
      }
    }
  }

  post {
    always {
      cleanWs()
    }
    success {
      echo '✅ Frontend CI/CD 성공 🎉'
    }
    failure {
      echo '❌ Frontend CI/CD 실패 ❗'
    }
  }
}