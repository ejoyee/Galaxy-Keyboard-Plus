pipeline {
  agent any

  environment {
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'

    KEYSTORE_PASSWORD = credentials('KEYSTORE_PASSWORD')
    KEY_ALIAS         = credentials('KEY_ALIAS')
    KEY_PASSWORD      = credentials('KEY_PASSWORD')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Checkout & Init') {
      steps {
        sh 'chmod -R 777 .'
      }
    }

    stage('Prepare Project') {
      steps {
        sh '''
          echo 📦 작업 디렉토리 준비 및 압축
          rm -rf workspace workspace.tar.gz
          mkdir -p workspace
          cp -a front/frontend/. workspace/
          chmod -R 777 workspace

          [ -f workspace/package.json ] && echo 📄 package.json 확인 완료
          tar -czf workspace.tar.gz -C workspace .
          echo 📊 압축 파일 상태:
          ls -lh workspace.tar.gz
          stat workspace.tar.gz
        '''
      }
    }

    stage('Prepare Secrets') {
      steps {
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo 🔐 시크릿 파일 복사
            mkdir -p workspace/android/app/keystore
            cp $KEYSTORE_FILE workspace/android/app/keystore/release.keystore
            cp $GOOGLE_SERVICES_JSON workspace/android/app/google-services.json
            cp $FIREBASE_SERVICE_ACCOUNT workspace/android/firebase_service_account.json
            chmod -R 777 workspace/android
          '''
        }
      }
    }

    stage('Build and Deploy') {
      steps {
        sh '''
          echo 🚀 Docker 빌드 및 배포 시작
          echo 🐳 컨테이너 생성 및 파일 복사
          CID=$(docker create cimg/android:2023.08)
          docker cp workspace.tar.gz $CID:/tmp/project.tar.gz
          docker start $CID

          docker exec $CID bash -c "
            set -e
            echo '📂 압축 해제'
            mkdir -p /tmp/project
            tar -xzf /tmp/project.tar.gz -C /tmp/project
            cd /tmp/project

            echo '📦 npm install'
            npm install

            echo '🛠️ Android 빌드'
            cd android
            chmod +x ./gradlew
            echo 'sdk.dir=\$ANDROID_HOME' > local.properties
            echo 'KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}' >> gradle.properties
            echo 'KEY_ALIAS=${KEY_ALIAS}' >> gradle.properties
            echo 'KEY_PASSWORD=${KEY_PASSWORD}' >> gradle.properties
            ./gradlew clean assembleRelease --stacktrace

            echo '📦 빌드 산출물 복사'
            mkdir -p /tmp/output
            find . -name '*.apk' -o -name '*.aab' -exec cp {} /tmp/output/ \\;

            echo '🔥 Firebase 배포'
            npm install -g firebase-tools
            firebase appdistribution:distribute /tmp/output/*.apk \\
              --app '$FIREBASE_APP_ID' \\
              --token '$FIREBASE_TOKEN' \\
              --groups 'testers' \\
              --release-notes 'CI 자동 배포 #${BUILD_ID}'
          "
        '''
      }
    }
  }

  post {
    always {
      sh '''
        echo ❌ 빌드 실패 디버깅 저장
        mkdir -p debug-archive
        echo "## package.json 내용" >> debug-archive/log.txt
        cat workspace/package.json >> debug-archive/log.txt || echo "없음" >> debug-archive/log.txt
        echo "\\n## .tar.gz 상태" >> debug-archive/log.txt
        stat workspace.tar.gz >> debug-archive/log.txt || echo "stat 실패" >> debug-archive/log.txt
      '''
      archiveArtifacts artifacts: 'debug-archive/**', onlyIfSuccessful: false
    }
  }
}
