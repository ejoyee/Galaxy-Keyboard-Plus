pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
  }

  parameters {
    string(
      name: 'FORCE_SERVICES',
      defaultValue: '',
      description: '콤마로 지정 시 해당 서비스만 빌드·배포 (예: frontend)'
    )
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Detect Frontend Build') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          def changed = diff.split('\n')
                            .findAll { it.startsWith('front/frontend/') }
                            .collect { 'frontend' }
                            .unique()
          def forced = params.FORCE_SERVICES ? params.FORCE_SERVICES.split(',').collect { it.trim() } : []
          env.CHANGED_SERVICES = (forced ?: changed).join(',')
          if (!env.CHANGED_SERVICES) {
            echo "프론트엔드 변경 없음, 빌드 스킵"
            currentBuild.result = 'SUCCESS'
          } else {
            echo "▶ Frontend 변경 감지: 빌드 실행"
          }
        }
      }
    }

    stage('Docker Container Build') {
      when {
        expression { env.CHANGED_SERVICES.contains('frontend') }
      }
      steps {
        script {
          docker.image('my-android-ci:latest')
                // -i 삭제, root 권한 유지
                .inside('-u root:root') {
            // 1) 키스토어·설정 파일 복사
            withCredentials([
              file(  credentialsId: 'android-release-keystore',    variable: 'KEYSTORE_FILE'),
              string(credentialsId: 'KEYSTORE_PASSWORD',            variable: 'KEYSTORE_PASSWORD'),
              string(credentialsId: 'KEY_ALIAS',                    variable: 'KEY_ALIAS'),
              string(credentialsId: 'KEY_PASSWORD',                 variable: 'KEY_PASSWORD'),
              file(  credentialsId: 'google-services-json',         variable: 'GOOGLE_SERVICES_JSON'),
              file(  credentialsId: 'firebase-service-account',     variable: 'FIREBASE_SERVICE_ACCOUNT')
            ]) {
              sh '''
                mkdir -p front/frontend/android/app/keystore
                cp "$KEYSTORE_FILE"            front/frontend/android/app/keystore/release.keystore
                cp "$GOOGLE_SERVICES_JSON"     front/frontend/android/app/google-services.json
                cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
              '''
            }

            // 2) 종속성 설치
            dir('front/frontend/android') {
              sh 'yarn install'
              sh 'bundle install --path vendor/bundle'
              sh 'bundle exec fastlane install_plugins'
            }

            // 3) 빌드 & Firebase App Distribution
            dir('front/frontend/android') {
              sh "bundle exec fastlane release groups:'testers' notes:'CI 자동 배포 빌드'"
            }
          }
        }
      }
    }

    stage('Archive APK') {
      when {
        expression { env.CHANGED_SERVICES.contains('frontend') }
      }
      steps {
        archiveArtifacts artifacts: 'front/frontend/android/app/build/outputs/**/*.apk', fingerprint: true
      }
    }
  }

  post {
    always {
      cleanWs()
    }
    success {
      echo '✅ Frontend CI/CD 성공적으로 완료'
    }
    failure {
      echo '❌ Frontend CI/CD 중 오류 발생'
    }
  }
}
