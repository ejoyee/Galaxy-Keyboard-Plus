pipeline {
  agent any

  environment {
    FIREBASE_TOKEN      = credentials('FIREBASE_TOKEN')
    FIREBASE_APP_ID     = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    KEYSTORE_PASSWORD   = credentials('KEYSTORE_PASSWORD')
    KEY_ALIAS           = credentials('KEY_ALIAS')
    KEY_PASSWORD        = credentials('KEY_PASSWORD')
    DOCKER_IMAGE        = 'cimg/android:2023.08'
    WORK_DIR            = "${WORKSPACE}/workspace"
    TAR_PATH            = "${WORKSPACE}/workspace.tar.gz"
    ARCHIVE_DIR         = "${WORKSPACE}/apk-archive"
  }

  stages {
    stage('Checkout & Init') {
      steps {
        checkout scm
        sh 'chmod -R 777 .'
      }
    }

    stage('Prepare Project') {
      steps {
        sh '''
          echo "📦 작업 디렉토리 준비 및 압축"

          echo "🧹 기존 아카이브 제거"
          [ -d "${TAR_PATH}" ] && echo "⚠️ ${TAR_PATH} 디렉토리 삭제" && rm -rf "${TAR_PATH}"
          [ -f "${TAR_PATH}" ] && echo "🧹 이전 tar 파일 삭제" && rm -f "${TAR_PATH}"

          rm -rf ${WORK_DIR}
          mkdir -p ${WORK_DIR}
          cp -a front/frontend/. ${WORK_DIR}/
          chmod -R 777 ${WORK_DIR}

          echo "📄 package.json 확인"
          [ -f ${WORK_DIR}/package.json ] || { echo "❌ package.json 없음"; exit 1; }

          echo "📦 압축 생성"
          tar -czf ${TAR_PATH} -C ${WORK_DIR} .
          [ -f ${TAR_PATH} ] || { echo "❌ 압축 파일 생성 실패"; exit 1; }

          echo "📊 .tar.gz 상태"
          ls -lh ${TAR_PATH}
          stat ${TAR_PATH}
        '''
      }
    }

    stage('Prepare Secrets') {
      steps {
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "🔐 시크릿 파일 복사"
            mkdir -p ${WORK_DIR}/android/app/keystore
            cp "$KEYSTORE_FILE" ${WORK_DIR}/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" ${WORK_DIR}/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" ${WORK_DIR}/android/firebase_service_account.json
            chmod -R 777 ${WORK_DIR}/android
          '''
        }
      }
    }

    stage('Build and Deploy') {
      steps {
        sh '''
          echo "📁 마운트 전 상태 검사"
          [ -d "${TAR_PATH}" ] && echo "❌ ${TAR_PATH}는 디렉토리입니다!" && exit 1
          [ -f "${TAR_PATH}" ] || { echo "❌ ${TAR_PATH} 파일 없음"; exit 1; }
          ls -lh ${TAR_PATH}
          stat ${TAR_PATH}

          docker run --rm \
            -v "${TAR_PATH}:/input/project.tar.gz" \
            -e FIREBASE_TOKEN="${FIREBASE_TOKEN}" \
            -e FIREBASE_APP_ID="${FIREBASE_APP_ID}" \
            ${DOCKER_IMAGE} \
            bash -c '
              set -e
              echo "📄 project.tar.gz 확인"
              [ -d /input/project.tar.gz ] && echo "❌ 디렉토리로 마운트됨" && exit 1
              [ -f /input/project.tar.gz ] || { echo "❌ 파일 없음"; exit 1; }

              mkdir -p /tmp/project
              tar -xzf /input/project.tar.gz -C /tmp/project
              cd /tmp/project
              npm install

              cd android
              chmod +x ./gradlew
              echo "sdk.dir=$ANDROID_HOME" > local.properties
              echo "KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}" >> gradle.properties
              echo "KEY_ALIAS=${KEY_ALIAS}" >> gradle.properties
              echo "KEY_PASSWORD=${KEY_PASSWORD}" >> gradle.properties
              ./gradlew clean assembleRelease --stacktrace

              mkdir -p /tmp/output
              find . -name "*.apk" -o -name "*.aab" -exec cp {} /tmp/output/ \;
              npm install -g firebase-tools
              firebase appdistribution:distribute /tmp/output/*.apk \
                --app "$FIREBASE_APP_ID" \
                --token "$FIREBASE_TOKEN" \
                --groups "testers" \
                --release-notes "CI 자동 배포 #${BUILD_ID}"
            '
        '''
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    failure {
      sh '''
        echo "❌ 빌드 실패 디버깅 저장"
        mkdir -p debug-archive
        echo "## package.json 내용" > debug-archive/info.txt
        cat ${WORK_DIR}/package.json >> debug-archive/info.txt 2>/dev/null || echo "없음" >> debug-archive/info.txt
        echo "\n## .tar.gz 상태" >> debug-archive/info.txt
        stat ${TAR_PATH} >> debug-archive/info.txt 2>/dev/null || echo "stat 실패" >> debug-archive/info.txt
      '''
      archiveArtifacts artifacts: 'debug-archive/**', fingerprint: true, allowEmptyArchive: true
    }
    always {
      cleanWs()
    }
  }
}
