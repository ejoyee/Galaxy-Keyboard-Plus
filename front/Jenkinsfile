pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    // Firebase 앱 ID
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    // 빌드 강제 실행 여부
    FORCE_BUILD      = 'true'
    // Docker 이미지 설정
    DOCKER_IMAGE     = 'reactnativecommunity/react-native-android:latest'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // 빌드 시작 로그
        sh '''
          echo "===================================================="
          echo "🚀 빌드 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 빌드 ID: ${BUILD_ID}"
          echo "🔍 Git 커밋: ${GIT_COMMIT}"
          echo "🔍 브랜치: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          
          // 변경 파일 목록 출력
          echo "==== 변경된 파일 목록 ===="
          echo "${diff}"
          echo "=========================="
          
          // "front/" 하위 파일 변경이 있으면 빌드
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/') } ? 'true' : 'false'
          
          // 강제 빌드 옵션이 true이면 무조건 빌드
          if (env.FORCE_BUILD == 'true') {
            env.BUILD_FRONTEND = 'true'
            echo "🔧 강제 빌드 옵션이 활성화되어 있습니다."
          }
          
          echo env.BUILD_FRONTEND=='true'
               ? "▶ Frontend 변경 감지: 빌드합니다"
               : "▶ Frontend 변경 없음: 스킵합니다"
        }
      }
    }

    stage('Check Project Structure') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "🔍 프로젝트 구조 확인"
          echo "===================================================="
          
          # 디렉토리 구조 확인
          echo "📂 작업 디렉토리: $(pwd)"
          
          echo "📂 front/frontend 디렉토리 확인:"
          ls -la front/frontend || { echo "❌ front/frontend 디렉토리가 없습니다"; exit 1; }
          
          # package.json 확인
          if [ -f "front/frontend/package.json" ]; then
            echo "✅ package.json 파일 존재"
            cat front/frontend/package.json | grep "name\\|version"
          else
            echo "❌ package.json 파일이 없습니다. React Native 프로젝트가 아닐 수 있습니다."
            exit 1
          fi
          
          echo "📂 front/frontend/android 디렉토리 확인:"
          ls -la front/frontend/android || { echo "❌ front/frontend/android 디렉토리가 없습니다"; exit 1; }
          
          echo "===================================================="
        '''
      }
    }

    stage('Prepare Files') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 시크릿 파일 준비
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔐 시크릿 파일 준비"
            echo "===================================================="
            
            # Keystore 디렉토리 생성
            mkdir -p front/frontend/android/app/keystore
            
            # 시크릿 파일 복사
            cp "$KEYSTORE_FILE" front/frontend/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" front/frontend/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
            
            echo "✅ 시크릿 파일 복사 완료"
            echo "===================================================="
          '''
        }
      }
    }

    stage('Build Android Only') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "🐳 Docker를 사용한 Android 전용 빌드"
          echo "===================================================="
          
          # 작업 디렉토리
          WORKSPACE_DIR="$(pwd)"
          ANDROID_DIR="${WORKSPACE_DIR}/front/frontend/android"
          
          # 디렉토리 존재 확인
          if [ ! -d "$ANDROID_DIR" ]; then
            echo "❌ Android 디렉토리가 존재하지 않습니다: $ANDROID_DIR"
            exit 1
          fi
          
          echo "📂 Android 디렉토리: $ANDROID_DIR"
          echo "🔍 Docker 이미지: ${DOCKER_IMAGE}"
          
          # Docker 컨테이너에서 직접 Android 빌드만 실행
          docker run --rm \
            -v "$ANDROID_DIR:/app" \
            -w /app \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            -e KEYSTORE_PASSWORD="$KEYSTORE_PASSWORD" \
            -e KEY_ALIAS="$KEY_ALIAS" \
            -e KEY_PASSWORD="$KEY_PASSWORD" \
            ${DOCKER_IMAGE} \
            bash -c '
              set -e
              
              echo "==== 작업 디렉토리 확인 ===="
              pwd
              ls -la
              
              echo "==== Android 환경 확인 ===="
              echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
              echo "ANDROID_HOME: $ANDROID_HOME"
              
              if [ ! -f "./gradlew" ]; then
                echo "❌ gradlew 파일이 없습니다."
                exit 1
              fi
              
              # gradlew 실행 권한 부여
              chmod +x ./gradlew
              
              # 로컬 프로퍼티 파일 생성
              echo "sdk.dir=/opt/android-sdk" > local.properties
              
              # 디버그 APK 빌드
              ./gradlew assembleDebug --stacktrace
              
              # 빌드 결과 확인
              echo "==== 빌드 결과 확인 ===="
              find . -name "*.apk"
            '
          
          # 빌드 결과 코드 캡처
          BUILD_RESULT=$?
          
          if [ $BUILD_RESULT -ne 0 ]; then
            echo "❌ Docker 빌드 실패 (결과 코드: $BUILD_RESULT)"
            exit $BUILD_RESULT
          fi
          
          echo "✅ Docker 빌드 완료"
          echo "===================================================="
        '''
      }
    }

    stage('Deploy to Firebase') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // Firebase 배포
        withCredentials([
          string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔥 Firebase 배포"
            echo "===================================================="
            
            # APK 파일 찾기 - 전체 경로 지정
            APK_FILE=$(find "$(pwd)/front/frontend/android" -name "*.apk" | head -1)
            
            if [ -z "$APK_FILE" ]; then
              echo "❌ APK 파일을 찾을 수 없어 Firebase 배포를 건너뜁니다"
              exit 1
            fi
            
            echo "✅ 업로드할 APK 파일: $APK_FILE"
            
            # Docker에서 Firebase 배포 실행
            docker run --rm \
              -v "$(pwd):/workspace" \
              -w /workspace \
              -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
              -e FIREBASE_APP_ID="$FIREBASE_APP_ID" \
              -e APK_FILE="$APK_FILE" \
              node:14 \
              bash -c '
                echo "==== Node.js 버전 확인 ===="
                node -v
                npm -v
                
                echo "==== Firebase CLI 설치 ===="
                npm install -g firebase-tools
                
                echo "==== APK 파일 확인 ===="
                echo "APK 파일 경로: $APK_FILE"
                
                if [ ! -f "$APK_FILE" ]; then
                  echo "❌ Docker 내부에서 APK 파일을 찾을 수 없습니다."
                  echo "Docker 컨테이너 디렉토리 내용:"
                  find /workspace -name "*.apk"
                  exit 1
                fi
                
                echo "==== Firebase 배포 ===="
                firebase appdistribution:distribute "$APK_FILE" \
                  --app "$FIREBASE_APP_ID" \
                  --token "$FIREBASE_TOKEN" \
                  --groups "testers" \
                  --release-notes "Jenkins CI 자동 배포 빌드"
              '
            
            DEPLOY_RESULT=$?
            
            if [ $DEPLOY_RESULT -ne 0 ]; then
              echo "❌ Firebase 배포 실패 (결과 코드: $DEPLOY_RESULT)"
              # 배포 실패해도 빌드 과정 계속 진행
              echo "⚠️ 배포 실패했지만 빌드 과정은 계속 진행합니다."
            else
              echo "✅ Firebase 배포 완료"
            fi
            
            echo "===================================================="
          '''
        }
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "📦 APK 아카이브"
          echo "===================================================="
          
          # APK 파일 존재 확인
          APK_COUNT=$(find "$(pwd)/front/frontend/android" -name "*.apk" 2>/dev/null | wc -l || echo "0")
          
          if [ "$APK_COUNT" -gt 0 ]; then
            echo "✅ $APK_COUNT 개의 APK 파일 발견:"
            find "$(pwd)/front/frontend/android" -name "*.apk" 2>/dev/null
            
            # 모든 APK 파일을 하나의 디렉토리로 복사
            mkdir -p apk-archive
            find "$(pwd)/front/frontend/android" -name "*.apk" -exec cp {} apk-archive/ \\; || true
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
            mkdir -p apk-archive
            echo "No APK files found" > apk-archive/build-failed.txt
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      sh '''
        echo "===================================================="
        echo "✅ Frontend CI/CD 성공 🎉"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "❌ Frontend CI/CD 실패 ❗"
        echo "===================================================="
      '''
    }
    always {
      sh '''
        echo "===================================================="
        echo "🧹 작업 공간 정리"
        echo "===================================================="
      '''
      cleanWs()
    }
  }
}