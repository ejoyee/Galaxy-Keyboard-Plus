pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    // Firebase 앱 ID
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // 빌드 시작 로그
        sh '''
          echo "===================================================="
          echo "🚀 빌드 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 빌드 ID: ${BUILD_ID}"
          echo "🔍 Git 커밋: ${GIT_COMMIT}"
          echo "🔍 브랜치: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          
          // 변경 파일 목록 출력
          echo "==== 변경된 파일 목록 ===="
          echo "${diff}"
          echo "=========================="
          
          // front/frontend/ 하위 파일 변경이 있으면 빌드
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/frontend/') } ? 'true' : 'false'
          echo env.BUILD_FRONTEND=='true'
               ? "▶ Frontend 변경 감지: 빌드합니다"
               : "▶ Frontend 변경 없음: 스킵합니다"
        }
      }
    }

    stage('Project Check') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 프로젝트 구조 점검 및 디버깅
        sh '''
          echo "===================================================="
          echo "🔍 프로젝트 구조 점검"
          echo "===================================================="
          
          # 중요 파일 확인
          echo "📂 front/frontend 디렉토리 점검:"
          ls -la front/frontend || { echo "❌ front/frontend 디렉토리가 없습니다"; exit 1; }
          
          echo "📂 front/frontend/android 디렉토리 점검:"
          ls -la front/frontend/android || { echo "❌ front/frontend/android 디렉토리가 없습니다"; exit 1; }
          
          # gradlew 파일 확인
          if [ ! -f "front/frontend/android/gradlew" ]; then
            echo "⚠️ gradlew 파일이 없습니다. 기본 템플릿 생성 중..."
            touch front/frontend/android/gradlew
            chmod +x front/frontend/android/gradlew
            echo '#!/bin/sh
exec ./gradlew "$@"' > front/frontend/android/gradlew
          else
            echo "✅ gradlew 파일 존재"
            chmod +x front/frontend/android/gradlew
          fi
          
          # build.gradle 확인
          if [ ! -f "front/frontend/android/app/build.gradle" ]; then
            echo "⚠️ app/build.gradle 파일이 없습니다. APK 빌드가 불가능할 수 있습니다."
          else
            echo "✅ app/build.gradle 파일 존재"
            # 앱 ID 확인
            APP_ID=$(grep "applicationId" front/frontend/android/app/build.gradle | sed 's/.*applicationId[[:space:]]*[\\"\\'\'']\\([^\\"\\'\'']\\+\\)[\\"\\'\''].*/\\1/')
            if [ ! -z "$APP_ID" ]; then
              echo "✅ 앱 패키지 ID: $APP_ID"
            else
              echo "⚠️ 앱 패키지 ID를 찾을 수 없습니다"
            fi
          fi
          
          echo "===================================================="
        '''
      }
    }

    stage('Build APK Directly') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 시크릿 파일 준비
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔐 시크릿 파일 준비"
            echo "===================================================="
            
            # Keystore 디렉토리 생성
            mkdir -p front/frontend/android/app/keystore
            
            # 시크릿 파일 복사
            cp "$KEYSTORE_FILE" front/frontend/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" front/frontend/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
            
            echo "✅ 시크릿 파일 복사 완료"
            echo "===================================================="
          '''
        }
        
        // Docker를 사용하지 않고 직접 빌드 시도
        sh '''
          echo "===================================================="
          echo "🏗️ APK 직접 빌드 시도"
          echo "===================================================="
          
          # 작업 디렉토리로 이동
          cd front/frontend/android
          
          # 프로젝트 정보 출력
          echo "📂 현재 디렉토리: $(pwd)"
          echo "📂 디렉토리 내용:"
          ls -la
          
          # 안드로이드 SDK 환경 설정
          export ANDROID_SDK_ROOT=/opt/android-sdk
          export ANDROID_HOME=/opt/android-sdk
          export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
          
          # Gradlew 실행 권한 설정
          chmod +x ./gradlew || true
          
          # 로컬 빌드 속성 파일 생성 (Keystore 정보)
          cat > local.properties << EOL
sdk.dir=$ANDROID_SDK_ROOT
EOL

          # 직접 APK 빌드 시도
          if [ -f "./gradlew" ]; then
            echo "📱 Gradle 빌드 시도 중..."
            ./gradlew clean assembleDebug --stacktrace || echo "⚠️ Gradle 빌드 실패"
          else
            echo "❌ gradlew 파일이 없어 Gradle 빌드를 실행할 수 없습니다"
          fi
          
          # 결과 확인
          echo "📂 빌드 결과 확인:"
          find . -name "*.apk" || echo "❌ APK 파일이 생성되지 않았습니다"
          
          echo "===================================================="
        '''
        
        // APK 빌드 실패 시 React Native 빌드 환경 준비
        sh '''
          echo "===================================================="
          echo "🔧 React Native 빌드 환경 준비"
          echo "===================================================="
          
          # React Native 디렉토리로 이동
          cd front/frontend
          
          # 패키지 구조 확인
          echo "📂 React Native 프로젝트 구조:"
          ls -la
          
          # package.json 확인
          if [ -f "package.json" ]; then
            echo "✅ package.json 파일 존재"
          else
            echo "❌ package.json 파일이 없습니다"
          fi
          
          # 빌드 스크립트 확인
          ANDROID_BUILD_SCRIPT=$(grep "\"android\"" package.json | grep -o "\"[^\"]*\"" | tail -1 | tr -d \")
          if [ ! -z "$ANDROID_BUILD_SCRIPT" ]; then
            echo "✅ Android 빌드 스크립트: $ANDROID_BUILD_SCRIPT"
          else
            echo "⚠️ package.json에서 Android 빌드 스크립트를 찾을 수 없습니다"
          fi
          
          echo "===================================================="
        '''
      }
    }

    stage('Manual Firebase Upload') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // Debug APK 생성 및 Firebase에 수동 업로드
        withCredentials([
          string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔥 Firebase CLI를 통한 수동 업로드"
            echo "===================================================="
            
            # APK 파일 찾기
            APK_FILE=$(find front/frontend/android -name "*.apk" | head -1)
            
            if [ -z "$APK_FILE" ]; then
              echo "❌ APK 파일을 찾을 수 없어 Firebase 업로드를 건너뜁니다"
            else
              echo "✅ 업로드할 APK 파일: $APK_FILE"
              
              # Firebase CLI 설치 여부 확인
              if ! command -v firebase &> /dev/null; then
                echo "🔧 Firebase CLI 설치 중..."
                npm install -g firebase-tools || { echo "⚠️ Firebase CLI 설치 실패"; }
              fi
              
              # Firebase CLI 로그인 및 배포 시도
              if command -v firebase &> /dev/null; then
                echo "🔥 Firebase 배포 시도..."
                firebase appdistribution:distribute "$APK_FILE" \
                  --app "$FIREBASE_APP_ID" \
                  --token "$FIREBASE_TOKEN" \
                  --groups "testers" \
                  --release-notes "Jenkins CI 자동 배포 빌드" || echo "⚠️ Firebase 배포 실패"
              else
                echo "❌ Firebase CLI가 설치되지 않아 배포를 건너뜁니다"
              fi
            fi
            
            echo "===================================================="
          '''
        }
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "📦 APK 아카이브"
          echo "===================================================="
          
          # APK 파일 존재 확인
          APK_FILES=$(find front/frontend/android -name "*.apk" 2>/dev/null)
          APK_COUNT=$(echo "$APK_FILES" | grep -c .)
          
          if [ $APK_COUNT -gt 0 ]; then
            echo "✅ $APK_COUNT 개의 APK 파일 발견:"
            echo "$APK_FILES" | sed 's/^/   /'
            
            # 모든 APK 파일을 하나의 디렉토리로 복사
            mkdir -p apk-archive
            find front/frontend/android -name "*.apk" -exec cp {} apk-archive/ \\;
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
            mkdir -p apk-archive
            echo "No APK files found" > apk-archive/build-failed.txt
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      sh '''
        echo "===================================================="
        echo "✅ Frontend CI/CD 성공 🎉"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "❌ Frontend CI/CD 실패 ❗"
        echo "===================================================="
      '''
    }
    always {
      sh '''
        echo "===================================================="
        echo "🧹 작업 공간 정리"
        echo "===================================================="
      '''
      cleanWs()
    }
  }
}