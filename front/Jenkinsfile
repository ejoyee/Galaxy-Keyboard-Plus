pipeline {
  agent any

  environment {
    // Firebase 배포 정보
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
    FIREBASE_APP_ID  = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    // 키스토어 관련 설정
    KEYSTORE_PASSWORD = credentials('KEYSTORE_PASSWORD')
    KEY_ALIAS        = credentials('KEY_ALIAS')
    KEY_PASSWORD     = credentials('KEY_PASSWORD')
    // 사용할 Docker 이미지
    DOCKER_IMAGE     = 'my-android-ci:latest'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // 빌드 시작 로그
        sh '''
          echo "===================================================="
          echo "🚀 빌드 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 빌드 ID: ${BUILD_ID}"
          echo "🔍 Git 커밋: ${GIT_COMMIT}"
          echo "🔍 브랜치: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Prepare Build Environment') {
      steps {
        sh '''
          echo "===================================================="
          echo "🔧 빌드 환경 준비"
          echo "===================================================="
          
          # 임시 작업 디렉토리 생성
          rm -rf _build_tmp
          mkdir -p _build_tmp
          
          # 프로젝트 파일 복사
          echo "📂 프로젝트 파일 복사"
          cp -r front/frontend/* _build_tmp/
          
          # .git 디렉토리 제외 (불필요한 파일 제외)
          rm -rf _build_tmp/.git
          
          # 권한 설정 (모든 사용자가 읽고 쓸 수 있도록)
          chmod -R 777 _build_tmp
          
          echo "===================================================="
        '''
      }
    }

    stage('Prepare Secret Files') {
      steps {
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔐 시크릿 파일 준비"
            echo "===================================================="
            
            # 디렉토리 생성
            mkdir -p _build_tmp/android/app/keystore
            
            # 시크릿 파일 복사
            cp "$FIREBASE_SERVICE_ACCOUNT" _build_tmp/android/firebase_service_account.json
            cp "$GOOGLE_SERVICES_JSON" _build_tmp/android/app/google-services.json
            cp "$KEYSTORE_FILE" _build_tmp/android/app/keystore/release.keystore
            
            # 권한 설정
            chmod -R 777 _build_tmp/android/app/keystore
            chmod 666 _build_tmp/android/firebase_service_account.json
            chmod 666 _build_tmp/android/app/google-services.json
            chmod 666 _build_tmp/android/app/keystore/release.keystore
            
            echo "===================================================="
          '''
        }
      }
    }

    stage('Build in Docker') {
      steps {
        sh '''
          echo "===================================================="
          echo "🚀 Docker 내부에서 빌드 실행"
          echo "===================================================="
          
          # Docker 컨테이너 실행
          docker run --rm \
            -v "$(pwd)/_build_tmp:/project" \
            --workdir /project \
            --entrypoint bash \
            ${DOCKER_IMAGE} \
            -c '
              set -e  # 에러 발생 시 즉시 스크립트 중단
              
              echo "📂 현재 디렉토리: $(pwd)"
              ls -la
              
              echo "📦 Node.js 종속성 설치"
              npm install
              
              echo "📂 node_modules 설치 확인"
              ls -la node_modules/@react-native || echo "React Native 모듈을 찾을 수 없습니다"
              
              echo "🔧 Android 빌드 준비"
              cd android
              chmod +x ./gradlew
              
              echo "🔧 local.properties 생성"
              echo "sdk.dir=/opt/android-sdk" > local.properties
              
              echo "🔧 Gradle 프로퍼티 설정"
              cat >> gradle.properties << EOF

# CI 환경 키스토어 설정
KEYSTORE_PASSWORD='$KEYSTORE_PASSWORD'
KEY_ALIAS='$KEY_ALIAS'
KEY_PASSWORD='$KEY_PASSWORD'
EOF
              
              echo "🔧 Android SDK 확인"
              ls -la $ANDROID_SDK_ROOT || echo "Android SDK 디렉토리가 없습니다"
              
              echo "🔧 Gradle 빌드 실행"
              ./gradlew clean --stacktrace
              ./gradlew assembleDebug --stacktrace
              
              echo "🔧 빌드 결과 확인"
              find . -name "*.apk" || echo "APK 파일을 찾을 수 없습니다"
            '
          
          # 빌드 결과 디렉토리 생성
          mkdir -p apk
          
          # APK 파일 찾기 및 복사 (백슬래시 없이 xargs 사용)
          echo "🔍 APK 파일 검색"
          find _build_tmp/android -name "*.apk" | xargs -I {} cp {} apk/ || echo "APK 파일을 찾을 수 없습니다"
          
          echo "===================================================="
        '''
      }
    }

    stage('Archive APK') {
      steps {
        sh '''
          echo "===================================================="
          echo "📦 APK 아카이브"
          echo "===================================================="
          
          mkdir -p apk-archive
          
          # APK 파일 찾기 및 복사 (백슬래시 없이 xargs 사용)
          find apk -name "*.apk" | xargs -I {} cp {} apk-archive/ || echo "APK 파일이 없습니다"
          
          # 결과 확인
          APK_COUNT=$(find apk-archive -name "*.apk" | wc -l)
          
          if [ "$APK_COUNT" -gt 0 ]; then
            echo "✅ $APK_COUNT 개의 APK 파일이 있습니다:"
            find apk-archive -name "*.apk" | xargs ls -la
          else
            echo "❌ APK 파일이 없습니다"
            echo "No APK files found" > apk-archive/build-failed.txt
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }

    stage('Deploy to Firebase') {
      steps {
        withCredentials([
          string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔥 Firebase 배포"
            echo "===================================================="
            
            # APK 파일 찾기
            APK_FILE=$(find "$(pwd)/apk-archive" -name "*.apk" | head -1)
            
            if [ -z "$APK_FILE" ]; then
              echo "❌ APK 파일을 찾을 수 없어 Firebase 배포를 건너뜁니다"
              exit 0
            fi
            
            echo "✅ 업로드할 APK 파일: $APK_FILE"
            
            # Firebase 배포 실행
            docker run --rm \
              -v "$(pwd):/firebase_workspace" \
              -v "$(pwd)/_build_tmp/android:/app_android" \
              -w /app_android \
              -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
              -e FIREBASE_APP_ID="$FIREBASE_APP_ID" \
              ${DOCKER_IMAGE} \
              bash -c '
                export GEM_HOME=/root/.gem
                export PATH=$PATH:$GEM_HOME/bin
                
                # Fastlane 설치 확인
                bundle --version || gem install bundler
                
                # Fastlane으로 배포
                bundle config set path "vendor/bundle"
                bundle install
                
                echo "🔥 Firebase App Distribution 실행"
                bundle exec fastlane run firebase_app_distribution \
                  app:"$FIREBASE_APP_ID" \
                  firebase_cli_token:"$FIREBASE_TOKEN" \
                  apk_path:"/firebase_workspace/'"$APK_FILE"'" \
                  groups:"testers" \
                  release_notes:"Jenkins CI 자동 배포 빌드 #${BUILD_ID} (${GIT_COMMIT})"
              '
            
            echo "===================================================="
          '''
        }
      }
    }
  }

  post {
    success {
      sh '''
        echo "===================================================="
        echo "✅ Frontend CI/CD 성공 🎉"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "❌ Frontend CI/CD 실패 ❗"
        echo "===================================================="
        
        # 디버깅 정보 수집
        echo "# 빌드 실패 디버깅 정보" > debug-info.md
        echo "" >> debug-info.md
        
        echo "## 빌드 디렉토리 정보" >> debug-info.md
        ls -la _build_tmp 2>/dev/null >> debug-info.md || echo "빌드 디렉토리가 없습니다" >> debug-info.md
        echo "" >> debug-info.md
        
        echo "## node_modules 정보" >> debug-info.md
        ls -la _build_tmp/node_modules 2>/dev/null >> debug-info.md || echo "node_modules 디렉토리가 없습니다" >> debug-info.md
        echo "" >> debug-info.md
        
        echo "## Android 디렉토리 정보" >> debug-info.md
        ls -la _build_tmp/android 2>/dev/null >> debug-info.md || echo "안드로이드 디렉토리가 없습니다" >> debug-info.md
        echo "" >> debug-info.md
        
        # 디버깅 정보 아카이브
        mkdir -p debug-archive
        cp debug-info.md debug-archive/
        
        echo "📦 디버깅 정보가 debug-archive에 저장되었습니다"
      '''
      
      archiveArtifacts artifacts: 'debug-archive/**', fingerprint: true, allowEmptyArchive: true
    }
    always {
      sh '''
        echo "===================================================="
        echo "🧹 작업 공간 정리"
        echo "===================================================="
        
        # 임시 디렉토리 정리
        rm -rf _build_tmp apk apk-archive debug-archive || true
      '''
      cleanWs()
    }
  }
}