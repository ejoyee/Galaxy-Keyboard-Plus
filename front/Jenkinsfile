pipeline {
  agent any

  environment {
    // Android SDK 설정
    ANDROID_SDK_ROOT = '/opt/android-sdk'
    ANDROID_HOME     = '/opt/android-sdk'
    PATH             = "${env.PATH}:/opt/android-sdk/cmdline-tools/latest/bin:/opt/android-sdk/platform-tools"
    // Fastlane Firebase App Distribution 토큰
    FIREBASE_TOKEN   = credentials('FIREBASE_TOKEN')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        
        // 빌드 시작 로그
        sh '''
          echo "===================================================="
          echo "🚀 빌드 시작: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🔍 빌드 ID: ${BUILD_ID}"
          echo "🔍 Git 커밋: ${GIT_COMMIT}"
          echo "🔍 브랜치: ${GIT_BRANCH}"
          echo "===================================================="
        '''
      }
    }

    stage('Detect Frontend Changes') {
      steps {
        script {
          def diff = sh(
            script: "git diff --name-only ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD~1'} ${env.GIT_COMMIT}",
            returnStdout: true
          ).trim()
          
          // 변경 파일 목록 출력
          echo "==== 변경된 파일 목록 ===="
          echo "${diff}"
          echo "=========================="
          
          // front/frontend/ 하위 파일 변경이 있으면 빌드
          env.BUILD_FRONTEND = diff.split('\n').any { it.startsWith('front/frontend/') } ? 'true' : 'false'
          echo env.BUILD_FRONTEND=='true'
               ? "▶ Frontend 변경 감지: 빌드합니다"
               : "▶ Frontend 변경 없음: 스킵합니다"
        }
      }
    }

    stage('Build & Distribute Frontend') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        // 디렉토리 구조 확인
        sh '''
          echo "===================================================="
          echo "📁 디렉토리 구조 확인"
          echo "===================================================="
          
          # 시크릿 디렉토리 만들기
          mkdir -p front/frontend/android/app/keystore
          echo "✅ front/frontend/android/app/keystore 디렉토리 생성 완료"
          
          # 디렉토리 구조 확인
          echo "📂 작업 디렉토리: $(pwd)"
          
          echo "📂 front 디렉토리 확인:"
          ls -la front || { echo "❌ front 디렉토리가 없습니다"; exit 1; }
          
          echo "📂 front/frontend 디렉토리 확인:"
          ls -la front/frontend || { echo "❌ front/frontend 디렉토리가 없습니다"; exit 1; }
          
          echo "📂 front/frontend/android 디렉토리 확인:"
          ls -la front/frontend/android || { echo "❌ front/frontend/android 디렉토리가 없습니다"; exit 1; }
          
          echo "📂 front/frontend/android/app 디렉토리 확인:"
          ls -la front/frontend/android/app || { echo "❌ front/frontend/android/app 디렉토리가 없습니다"; exit 1; }
          
          # 폴더 구조가 올바른지 한 번 더 확인
          if [ ! -d "front/frontend/android" ]; then
            echo "❌ Android 프로젝트 폴더가 존재하지 않습니다"
            exit 1
          fi
          
          echo "===================================================="
        '''
        
        // 시크릿 파일 준비
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            echo "===================================================="
            echo "🔐 시크릿 파일 준비"
            echo "===================================================="
            
            cp "$KEYSTORE_FILE" front/frontend/android/app/keystore/release.keystore
            echo "✅ Keystore 파일 복사 완료"
            
            cp "$GOOGLE_SERVICES_JSON" front/frontend/android/app/google-services.json
            echo "✅ Google Services JSON 파일 복사 완료"
            
            cp "$FIREBASE_SERVICE_ACCOUNT" front/frontend/android/firebase_service_account.json
            echo "✅ Firebase Service Account 파일 복사 완료"
            
            echo "===================================================="
          '''
        }
        
        // 직접 Docker 이미지 빌드 및 실행 (볼륨 마운트 대신)
        sh '''
          echo "===================================================="
          echo "🐳 Docker 이미지로 안드로이드 빌드 및 배포"
          echo "===================================================="
          
          # 임시 작업 디렉토리 생성
          WORK_DIR=$(mktemp -d)
          echo "📁 임시 작업 디렉토리 생성: $WORK_DIR"
          
          # 안드로이드 프로젝트 복사
          echo "🔄 안드로이드 프로젝트 파일 복사 중..."
          cp -r front/frontend/android/* $WORK_DIR/
          
          # 디렉토리 내용 확인
          echo "📂 복사된 파일 확인:"
          ls -la $WORK_DIR
          
          # 임시 도커파일 생성
          cat > $WORK_DIR/Dockerfile.build << 'EOF'
FROM my-android-ci:latest

WORKDIR /app

# 프로젝트 파일 복사
COPY . /app

# 빌드 스크립트
RUN gem install bundler && \
    yarn install && \
    bundle install --path vendor/bundle && \
    bundle exec fastlane install_plugins 

# 환경 변수 설정을 위한 진입점 스크립트
COPY <<'ENTRYPOINT_SCRIPT' /entrypoint.sh
#!/bin/bash
set -e

echo "==== 빌드 환경 정보 ===="
echo "Node 버전: $(node --version)"
echo "Yarn 버전: $(yarn --version)"
echo "Ruby 버전: $(ruby --version)"
echo "Bundle 버전: $(bundle --version)"
echo "Fastlane 버전: $(fastlane --version)"
echo "========================="

echo "==== 작업 디렉토리 파일 확인 ===="
ls -la

# Fastlane 실행
bundle exec fastlane release groups:"testers" notes:"CI 자동 배포 빌드"
ENTRYPOINT_SCRIPT

RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
EOF
          
          # Docker 이미지 빌드
          echo "🏗️ Docker 이미지 빌드 중..."
          docker build -t android-build:${BUILD_ID} -f $WORK_DIR/Dockerfile.build $WORK_DIR
          
          # 환경 변수 설정하여 컨테이너 실행
          echo "🚀 Android 빌드 실행 중..."
          docker run --rm \
            -e ANDROID_SDK_ROOT=/opt/android-sdk \
            -e ANDROID_HOME=/opt/android-sdk \
            -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
            -e KEYSTORE_PASSWORD="$KEYSTORE_PASSWORD" \
            -e KEY_ALIAS="$KEY_ALIAS" \
            -e KEY_PASSWORD="$KEY_PASSWORD" \
            android-build:${BUILD_ID}
          
          # 빌드 결과 확인
          BUILD_RESULT=$?
          
          # 빌드 결과를 Jenkins 워크스페이스로 복사
          echo "🔄 빌드 결과물 복사 중..."
          docker create --name android-build-container android-build:${BUILD_ID}
          docker cp android-build-container:/app/app/build front/frontend/android/
          docker rm android-build-container
          
          # 정리
          echo "🧹 임시 파일 정리 중..."
          rm -rf $WORK_DIR
          docker rmi android-build:${BUILD_ID} || true
          
          echo "===================================================="
          
          # 빌드 상태 반환
          exit $BUILD_RESULT
        '''
      }
    }

    stage('Archive APK') {
      when { expression { env.BUILD_FRONTEND == 'true' } }
      steps {
        sh '''
          echo "===================================================="
          echo "📦 APK 아카이브 시작"
          echo "===================================================="
          
          # APK 파일 존재 확인
          APK_COUNT=$(find front/frontend/android/app/build/outputs -name "*.apk" 2>/dev/null | wc -l || echo 0)
          
          if [ "$APK_COUNT" -gt 0 ]; then
            echo "✅ $APK_COUNT 개의 APK 파일 발견"
            find front/frontend/android/app/build/outputs -name "*.apk" 2>/dev/null | sed 's/^/   /'
          else
            echo "❌ APK 파일을 찾을 수 없습니다"
            echo "📂 빌드 디렉토리 확인:"
            find front/frontend/android -type d -name "build" 2>/dev/null | sed 's/^/   빌드 디렉토리: /'
          fi
          
          echo "===================================================="
        '''
        
        archiveArtifacts artifacts: 'front/frontend/android/app/build/outputs/**/*.apk', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    always {
      sh '''
        echo "===================================================="
        echo "🧹 작업 공간 정리"
        echo "===================================================="
      '''
      cleanWs()
    }
    success {
      sh '''
        echo "===================================================="
        echo "✅ Frontend CI/CD 성공 🎉"
        echo "===================================================="
      '''
    }
    failure {
      sh '''
        echo "===================================================="
        echo "❌ Frontend CI/CD 실패 ❗"
        echo "===================================================="
      '''
    }
  }
}