pipeline {
  agent any

  environment {
    FIREBASE_TOKEN      = credentials('FIREBASE_TOKEN')
    FIREBASE_APP_ID     = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    KEYSTORE_PASSWORD   = credentials('KEYSTORE_PASSWORD')
    KEY_ALIAS           = credentials('KEY_ALIAS')
    KEY_PASSWORD        = credentials('KEY_PASSWORD')
    DOCKER_IMAGE        = 'cimg/android:2023.08'
    WORK_DIR            = "${WORKSPACE}/workspace"
    TAR_PATH            = "${WORKSPACE}/workspace.tar.gz"
    APK_DIR             = "${WORKSPACE}/apk"
    ARCHIVE_DIR         = "${WORKSPACE}/apk-archive"
  }

  stages {
    stage('Checkout & Init') {
      steps {
        checkout scm
        sh '''
          echo "📁 전체 권한 변경 (GitLab 클론 후)"
          chmod -R 777 .
        '''
      }
    }

    stage('Prepare Project') {
      steps {
        sh '''
          echo "📦 작업 디렉토리 준비"
          rm -rf ${WORK_DIR} ${TAR_PATH}
          mkdir -p ${WORK_DIR}

          cp -a front/frontend/. ${WORK_DIR}/
          chmod -R 777 ${WORK_DIR}

          echo "📄 package.json 존재 여부 확인"
          [ -f ${WORK_DIR}/package.json ] || { echo "❌ package.json 없음"; exit 1; }

          echo "📦 아카이브 생성"
          tar -czf ${TAR_PATH} -C ${WORK_DIR} .
          [ -f ${TAR_PATH} ] || { echo "❌ 아카이브 생성 실패"; exit 1; }
        '''
      }
    }

    stage('Prepare Secrets') {
      steps {
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_FILE'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_SERVICES_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_SERVICE_ACCOUNT')
        ]) {
          sh '''
            mkdir -p ${WORK_DIR}/android/app/keystore
            cp "$KEYSTORE_FILE" ${WORK_DIR}/android/app/keystore/release.keystore
            cp "$GOOGLE_SERVICES_JSON" ${WORK_DIR}/android/app/google-services.json
            cp "$FIREBASE_SERVICE_ACCOUNT" ${WORK_DIR}/android/firebase_service_account.json
            chmod -R 777 ${WORK_DIR}/android
          '''
        }
      }
    }

    stage('Build and Deploy') {
      steps {
        sh '''
          echo "🚀 Docker 빌드 및 배포 시작"

          docker run --rm \
            -v "${TAR_PATH}:/workspace.tar.gz" \
            -e FIREBASE_TOKEN="${FIREBASE_TOKEN}" \
            -e FIREBASE_APP_ID="${FIREBASE_APP_ID}" \
            ${DOCKER_IMAGE} \
            bash -c '
              set -e
              mkdir -p /tmp/project
              tar -xzf /workspace.tar.gz -C /tmp/project
              cd /tmp/project

              npm install

              cd android
              chmod +x ./gradlew
              echo "sdk.dir=$ANDROID_HOME" > local.properties
              echo "KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}" >> gradle.properties
              echo "KEY_ALIAS=${KEY_ALIAS}" >> gradle.properties
              echo "KEY_PASSWORD=${KEY_PASSWORD}" >> gradle.properties

              ./gradlew clean assembleRelease

              mkdir -p /tmp/output
              cp $(find . -name "*.apk" -o -name "*.aab") /tmp/output/

              npm install -g firebase-tools
              firebase appdistribution:distribute /tmp/output/*.apk \
                --app "$FIREBASE_APP_ID" \
                --token "$FIREBASE_TOKEN" \
                --groups "testers" \
                --release-notes "CI 자동 배포 #${BUILD_ID}"
            '

          mkdir -p ${ARCHIVE_DIR}
          cp -v ${APK_DIR}/*.apk ${ARCHIVE_DIR}/ || echo "⚠️ APK 파일 없음"
        '''
        archiveArtifacts artifacts: 'apk-archive/**', fingerprint: true, allowEmptyArchive: true
      }
    }
  }

  post {
    success {
      echo '✅ CI/CD 성공!'
    }
    failure {
      sh '''
        echo "❌ 빌드 실패, 디버깅 정보 수집"
        mkdir -p debug-archive
        echo "## package.json 내용" > debug-archive/info.txt
        cat ${WORK_DIR}/package.json >> debug-archive/info.txt || echo "package.json 없음" >> debug-archive/info.txt
      '''
      archiveArtifacts artifacts: 'debug-archive/**', fingerprint: true, allowEmptyArchive: true
    }
    always {
      cleanWs()
    }
  }
}
