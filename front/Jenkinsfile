pipeline {
  agent any

  environment {
    FIREBASE_APP_ID = '1:189536895445:android:783ed885fd7c4b896bfd5c'
    WORK_DIR = "${WORKSPACE}/workspace"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Prepare Project') {
      steps {
        sh '''
          echo 📦 작업 디렉토리 준비
          rm -rf workspace
          mkdir -p workspace
          cp -a front/frontend/. workspace/
          chmod -R 777 workspace
          [ -f workspace/package.json ] && echo 📄 package.json 확인 완료
        '''
      }
    }

    stage('Prepare Secrets') {
      steps {
        withCredentials([
          file(credentialsId: 'android-release-keystore', variable: 'KEYSTORE_PATH'),
          file(credentialsId: 'google-services-json', variable: 'GOOGLE_JSON'),
          file(credentialsId: 'firebase-service-account', variable: 'FIREBASE_JSON')
        ]) {
          sh '''
            echo 🔐 시크릿 파일 복사
            mkdir -p workspace/android/app/keystore
            cp "$KEYSTORE_PATH" workspace/android/app/keystore/release.keystore
            cp "$GOOGLE_JSON" workspace/android/app/google-services.json
            cp "$FIREBASE_JSON" workspace/android/firebase_service_account.json
            chmod -R 777 workspace/android
          '''
        }
      }
    }

    stage('Build and Deploy') {
      steps {
        withCredentials([
          string(credentialsId: 'KEYSTORE_PASSWORD', variable: 'KEYSTORE_PASSWORD'),
          string(credentialsId: 'KEY_ALIAS', variable: 'KEY_ALIAS'),
          string(credentialsId: 'KEY_PASSWORD', variable: 'KEY_PASSWORD'),
          string(credentialsId: 'FIREBASE_TOKEN', variable: 'FIREBASE_TOKEN')
        ]) {
          sh '''
            echo 🚀 Docker 빌드 및 배포 시작
            docker run --rm -v "$PWD/workspace:/app" \
              -e FIREBASE_TOKEN="$FIREBASE_TOKEN" \
              -e FIREBASE_APP_ID="$FIREBASE_APP_ID" \
              reactnativecommunity/docker-android:latest bash -c "
                set -e
                cd /app

                echo '📦 npm install'
                npm install

                echo '🛠️ Android 빌드'
                cd android
                chmod +x ./gradlew
                echo 'sdk.dir=/opt/android-sdk' > local.properties
                echo 'KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD' >> gradle.properties
                echo 'KEY_ALIAS=$KEY_ALIAS' >> gradle.properties
                echo 'KEY_PASSWORD=$KEY_PASSWORD' >> gradle.properties
                ./gradlew clean assembleRelease --stacktrace

                echo '📦 빌드 산출물 복사'
                mkdir -p /tmp/output
                find . -name '*.apk' -o -name '*.aab' -exec cp {} /tmp/output/ \\;

                echo '🔥 Firebase 배포'
                npm install -g firebase-tools
                firebase appdistribution:distribute /tmp/output/*.apk \\
                  --app $FIREBASE_APP_ID \\
                  --token $FIREBASE_TOKEN \\
                  --groups testers \\
                  --release-notes 'CI 자동 배포'
              "
          '''
        }
      }
    }
  }

  post {
    failure {
      sh '''
        echo ❌ 빌드 실패 디버깅 저장
        mkdir -p debug-archive
        echo '## package.json 내용'
        cat workspace/package.json || echo 없음
        echo '\\n## 디렉토리 상태'
        ls -al workspace || echo 없음
      '''
      archiveArtifacts artifacts: 'debug-archive/**', allowEmptyArchive: true
    }
  }
}
